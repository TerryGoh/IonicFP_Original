import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { CanvasWhiteboardShapeService } from './canvas-whiteboard-shape.service';
export class CanvasWhiteboardShapeSelectorComponent {
    constructor(elementRef, canvasWhiteboardShapeService) {
        this.elementRef = elementRef;
        this.canvasWhiteboardShapeService = canvasWhiteboardShapeService;
        this.showShapeSelector = false;
        this.onToggleShapeSelector = new EventEmitter();
        this.onShapeSelected = new EventEmitter();
        this.registeredShapes$ = this.canvasWhiteboardShapeService.registeredShapes$;
    }
    selectShape(shape) {
        this.onShapeSelected.emit(shape);
        this.toggleShapeSelector(null);
    }
    closeOnExternalClick(event) {
        if (!this.elementRef.nativeElement.contains(event.target) && this.showShapeSelector) {
            this.onToggleShapeSelector.emit(false);
        }
    }
    toggleShapeSelector(event) {
        if (event) {
            event.preventDefault();
        }
        this.onToggleShapeSelector.emit(!this.showShapeSelector);
    }
}
CanvasWhiteboardShapeSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'canvas-whiteboard-shape-selector',
                host: {
                    '(document:mousedown)': 'closeOnExternalClick($event)',
                    '(document:touchstart)': 'closeOnExternalClick($event)'
                },
                template: `
    <div *ngIf="!showShapeSelector" (click)="toggleShapeSelector($event)"
         class="canvas-whiteboard-shape-selector-selected-preview">
      <canvas-whiteboard-shape-preview [shapeConstructor]="selectedShapeConstructor"
                                       [shapeOptions]="shapeOptions"></canvas-whiteboard-shape-preview>
    </div>
    <div class="canvas-whiteboard-shape-selector-wrapper" *ngIf="showShapeSelector">
      <canvas-whiteboard-shape-preview *ngFor="let shapeConstructor of registeredShapes$ | async"
                                       [shapeConstructor]="shapeConstructor"
                                       [shapeOptions]="shapeOptions"
                                       (click)="selectShape(shapeConstructor)"></canvas-whiteboard-shape-preview>
    </div>
  `,
                styles: [`
    .canvas-whiteboard-shape-selector-selected-preview {
      vertical-align: bottom;
      display: inline-block;
    }

    .canvas-whiteboard-shape-selector-wrapper {
      display: block;
      padding: 4px;
      border: 1px solid #afafaf;
    }

    @media (min-width: 401px) {
      .canvas-whiteboard-shape-selector-wrapper {
      }
    }
  `]
            },] }
];
CanvasWhiteboardShapeSelectorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CanvasWhiteboardShapeService }
];
CanvasWhiteboardShapeSelectorComponent.propDecorators = {
    showShapeSelector: [{ type: Input }],
    selectedShapeConstructor: [{ type: Input }],
    shapeOptions: [{ type: Input }],
    onToggleShapeSelector: [{ type: Output }],
    onShapeSelected: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmcyLWNhbnZhcy13aGl0ZWJvYXJkL3NyYy9saWIvc2hhcGVzL2NhbnZhcy13aGl0ZWJvYXJkLXNoYXBlLXNlbGVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsNEJBQTRCLEVBQTZCLE1BQU0sbUNBQW1DLENBQUM7QUEwQzVHLE1BQU0sT0FBTyxzQ0FBc0M7SUFVakQsWUFBb0IsVUFBc0IsRUFDdEIsNEJBQTBEO1FBRDFELGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsaUNBQTRCLEdBQTVCLDRCQUE0QixDQUE4QjtRQVY1RCxzQkFBaUIsR0FBWSxLQUFLLENBQUM7UUFJM0MsMEJBQXFCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUNwRCxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFvRCxDQUFDO1FBTS9GLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsaUJBQWlCLENBQUM7SUFDL0UsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUF1RDtRQUNqRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELG9CQUFvQixDQUFDLEtBQUs7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ25GLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsS0FBWTtRQUM5QixJQUFJLEtBQUssRUFBRTtZQUNULEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN4QjtRQUVELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7WUFyRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQ0FBa0M7Z0JBQzVDLElBQUksRUFBRTtvQkFDSixzQkFBc0IsRUFBRSw4QkFBOEI7b0JBQ3RELHVCQUF1QixFQUFFLDhCQUE4QjtpQkFDeEQ7Z0JBQ0QsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7R0FZVDt5QkFDUTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCUjthQUNGOzs7WUE5Q0MsVUFBVTtZQUtILDRCQUE0Qjs7O2dDQTJDbEMsS0FBSzt1Q0FDTCxLQUFLOzJCQUNMLEtBQUs7b0NBRUwsTUFBTTs4QkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVTZXJ2aWNlLCBJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZS5zZXJ2aWNlJztcbmltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRTaGFwZSB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUnO1xuaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtb3B0aW9ucyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NhbnZhcy13aGl0ZWJvYXJkLXNoYXBlLXNlbGVjdG9yJyxcbiAgaG9zdDoge1xuICAgICcoZG9jdW1lbnQ6bW91c2Vkb3duKSc6ICdjbG9zZU9uRXh0ZXJuYWxDbGljaygkZXZlbnQpJyxcbiAgICAnKGRvY3VtZW50OnRvdWNoc3RhcnQpJzogJ2Nsb3NlT25FeHRlcm5hbENsaWNrKCRldmVudCknXG4gIH0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiAqbmdJZj1cIiFzaG93U2hhcGVTZWxlY3RvclwiIChjbGljayk9XCJ0b2dnbGVTaGFwZVNlbGVjdG9yKCRldmVudClcIlxuICAgICAgICAgY2xhc3M9XCJjYW52YXMtd2hpdGVib2FyZC1zaGFwZS1zZWxlY3Rvci1zZWxlY3RlZC1wcmV2aWV3XCI+XG4gICAgICA8Y2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtcHJldmlldyBbc2hhcGVDb25zdHJ1Y3Rvcl09XCJzZWxlY3RlZFNoYXBlQ29uc3RydWN0b3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3NoYXBlT3B0aW9uc109XCJzaGFwZU9wdGlvbnNcIj48L2NhbnZhcy13aGl0ZWJvYXJkLXNoYXBlLXByZXZpZXc+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhbnZhcy13aGl0ZWJvYXJkLXNoYXBlLXNlbGVjdG9yLXdyYXBwZXJcIiAqbmdJZj1cInNob3dTaGFwZVNlbGVjdG9yXCI+XG4gICAgICA8Y2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtcHJldmlldyAqbmdGb3I9XCJsZXQgc2hhcGVDb25zdHJ1Y3RvciBvZiByZWdpc3RlcmVkU2hhcGVzJCB8IGFzeW5jXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzaGFwZUNvbnN0cnVjdG9yXT1cInNoYXBlQ29uc3RydWN0b3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3NoYXBlT3B0aW9uc109XCJzaGFwZU9wdGlvbnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cInNlbGVjdFNoYXBlKHNoYXBlQ29uc3RydWN0b3IpXCI+PC9jYW52YXMtd2hpdGVib2FyZC1zaGFwZS1wcmV2aWV3PlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtgXG4gICAgLmNhbnZhcy13aGl0ZWJvYXJkLXNoYXBlLXNlbGVjdG9yLXNlbGVjdGVkLXByZXZpZXcge1xuICAgICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG5cbiAgICAuY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtc2VsZWN0b3Itd3JhcHBlciB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBhZGRpbmc6IDRweDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNhZmFmYWY7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDQwMXB4KSB7XG4gICAgICAuY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtc2VsZWN0b3Itd3JhcHBlciB7XG4gICAgICB9XG4gICAgfVxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVTZWxlY3RvckNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHJlYWRvbmx5IHNob3dTaGFwZVNlbGVjdG9yOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHJlYWRvbmx5IHNlbGVjdGVkU2hhcGVDb25zdHJ1Y3RvcjogSU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+O1xuICBASW5wdXQoKSByZWFkb25seSBzaGFwZU9wdGlvbnM6IENhbnZhc1doaXRlYm9hcmRTaGFwZU9wdGlvbnM7XG5cbiAgQE91dHB1dCgpIG9uVG9nZ2xlU2hhcGVTZWxlY3RvciA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgQE91dHB1dCgpIG9uU2hhcGVTZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8SU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+PigpO1xuXG4gIHJlZ2lzdGVyZWRTaGFwZXMkOiBPYnNlcnZhYmxlPElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPltdPjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgY2FudmFzV2hpdGVib2FyZFNoYXBlU2VydmljZTogQ2FudmFzV2hpdGVib2FyZFNoYXBlU2VydmljZSkge1xuICAgIHRoaXMucmVnaXN0ZXJlZFNoYXBlcyQgPSB0aGlzLmNhbnZhc1doaXRlYm9hcmRTaGFwZVNlcnZpY2UucmVnaXN0ZXJlZFNoYXBlcyQ7XG4gIH1cblxuICBzZWxlY3RTaGFwZShzaGFwZTogSU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+KTogdm9pZCB7XG4gICAgdGhpcy5vblNoYXBlU2VsZWN0ZWQuZW1pdChzaGFwZSk7XG4gICAgdGhpcy50b2dnbGVTaGFwZVNlbGVjdG9yKG51bGwpO1xuICB9XG5cbiAgY2xvc2VPbkV4dGVybmFsQ2xpY2soZXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgdGhpcy5zaG93U2hhcGVTZWxlY3Rvcikge1xuICAgICAgdGhpcy5vblRvZ2dsZVNoYXBlU2VsZWN0b3IuZW1pdChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlU2hhcGVTZWxlY3RvcihldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5vblRvZ2dsZVNoYXBlU2VsZWN0b3IuZW1pdCghdGhpcy5zaG93U2hhcGVTZWxlY3Rvcik7XG4gIH1cbn1cbiJdfQ==