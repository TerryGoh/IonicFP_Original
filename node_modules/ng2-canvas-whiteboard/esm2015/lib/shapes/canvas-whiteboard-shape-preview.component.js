import { Component, Input, ViewChild } from '@angular/core';
import { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';
import { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';
export class CanvasWhiteboardShapePreviewComponent {
    ngAfterViewInit() {
        this.drawShapePreview();
    }
    ngOnChanges(changes) {
        if (changes.shapeConstructor || changes.shapeOptions) {
            this.drawShapePreview();
        }
    }
    drawShapePreview() {
        if (!this.canvas) {
            return;
        }
        const context = this.canvas.nativeElement.getContext('2d');
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        const concreteShape = new this.shapeConstructor(new CanvasWhiteboardPoint(0, 0), Object.assign(new CanvasWhiteboardShapeOptions(), this.shapeOptions));
        concreteShape.drawPreview(context);
    }
}
CanvasWhiteboardShapePreviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'canvas-whiteboard-shape-preview',
                template: `
    <canvas #canvasWhiteboardShapePreview width="50px" height="50px"
            class="canvas-whiteboard-shape-preview-canvas"></canvas>
  `,
                styles: [`
    .canvas-whiteboard-shape-preview-canvas {
      cursor: pointer;
    }
  `]
            },] }
];
CanvasWhiteboardShapePreviewComponent.propDecorators = {
    shapeConstructor: [{ type: Input }],
    shapeOptions: [{ type: Input }],
    canvas: [{ type: ViewChild, args: ['canvasWhiteboardShapePreview',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtcHJldmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzItY2FudmFzLXdoaXRlYm9hcmQvc3JjL2xpYi9zaGFwZXMvY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtcHJldmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxLQUFLLEVBQ0wsU0FBUyxFQUlWLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBY2pGLE1BQU0sT0FBTyxxQ0FBcUM7SUFNaEQsZUFBZTtRQUNiLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUNwRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixPQUFPO1NBQ1I7UUFFRCxNQUFNLE9BQU8sR0FBNkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JGLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXJFLE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUM3QyxJQUFJLHFCQUFxQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLDRCQUE0QixFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUNyRSxDQUFDO1FBRUYsYUFBYSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7WUExQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLFFBQVEsRUFBRTs7O0dBR1Q7eUJBQ1E7Ozs7R0FJUjthQUNGOzs7K0JBRUUsS0FBSzsyQkFDTCxLQUFLO3FCQUVMLFNBQVMsU0FBQyw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBWaWV3Q2hpbGQsXG4gIEFmdGVyVmlld0luaXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGUgfSBmcm9tICcuL2NhbnZhcy13aGl0ZWJvYXJkLXNoYXBlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZSc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQgfSBmcm9tICcuLi9jYW52YXMtd2hpdGVib2FyZC1wb2ludC5tb2RlbCc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVPcHRpb25zIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZS1vcHRpb25zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtcHJldmlldycsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGNhbnZhcyAjY2FudmFzV2hpdGVib2FyZFNoYXBlUHJldmlldyB3aWR0aD1cIjUwcHhcIiBoZWlnaHQ9XCI1MHB4XCJcbiAgICAgICAgICAgIGNsYXNzPVwiY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtcHJldmlldy1jYW52YXNcIj48L2NhbnZhcz5cbiAgYCxcbiAgc3R5bGVzOiBbYFxuICAgIC5jYW52YXMtd2hpdGVib2FyZC1zaGFwZS1wcmV2aWV3LWNhbnZhcyB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgfVxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVQcmV2aWV3Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcmVhZG9ubHkgc2hhcGVDb25zdHJ1Y3RvcjogSU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+O1xuICBASW5wdXQoKSByZWFkb25seSBzaGFwZU9wdGlvbnM6IENhbnZhc1doaXRlYm9hcmRTaGFwZU9wdGlvbnM7XG5cbiAgQFZpZXdDaGlsZCgnY2FudmFzV2hpdGVib2FyZFNoYXBlUHJldmlldycpIGNhbnZhczogRWxlbWVudFJlZjtcblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5kcmF3U2hhcGVQcmV2aWV3KCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuc2hhcGVDb25zdHJ1Y3RvciB8fCBjaGFuZ2VzLnNoYXBlT3B0aW9ucykge1xuICAgICAgdGhpcy5kcmF3U2hhcGVQcmV2aWV3KCk7XG4gICAgfVxuICB9XG5cbiAgZHJhd1NoYXBlUHJldmlldygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY2FudmFzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEID0gdGhpcy5jYW52YXMubmF0aXZlRWxlbWVudC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuXG4gICAgY29uc3QgY29uY3JldGVTaGFwZSA9IG5ldyB0aGlzLnNoYXBlQ29uc3RydWN0b3IoXG4gICAgICBuZXcgQ2FudmFzV2hpdGVib2FyZFBvaW50KDAsIDApLFxuICAgICAgT2JqZWN0LmFzc2lnbihuZXcgQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucygpLCB0aGlzLnNoYXBlT3B0aW9ucylcbiAgICApO1xuXG4gICAgY29uY3JldGVTaGFwZS5kcmF3UHJldmlldyhjb250ZXh0KTtcbiAgfVxufVxuIl19