import { Injectable } from '@angular/core';
import { CircleShape } from './circle-shape';
import { RectangleShape } from './rectangle-shape';
import { FreeHandShape } from './free-hand-shape';
import { SmileyShape } from './smiley-shape';
import { StarShape } from './star-shape';
import { LineShape } from './line-shape';
import { BehaviorSubject } from 'rxjs';
export class CanvasWhiteboardShapeService {
    constructor() {
        this.registeredShapesSubject = new BehaviorSubject([
            FreeHandShape,
            LineShape,
            RectangleShape,
            CircleShape,
            StarShape,
            SmileyShape
        ]);
        this.registeredShapes$ = this.registeredShapesSubject.asObservable();
    }
    getShapeConstructorFromShapeName(shapeName) {
        return this.getCurrentRegisteredShapes().find((shape) => (new shape).getShapeName() === shapeName);
    }
    getCurrentRegisteredShapes() {
        return this.registeredShapesSubject.getValue();
    }
    isRegisteredShape(shape) {
        return this.getCurrentRegisteredShapes().indexOf(shape) !== -1;
    }
    registerShape(shape) {
        if (this.isRegisteredShape(shape)) {
            console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);
            return;
        }
        const registeredShapes = this.getCurrentRegisteredShapes();
        registeredShapes.push(shape);
        this.registeredShapesSubject.next(registeredShapes);
    }
    registerShapes(shapes) {
        this.registeredShapesSubject.next(this.getCurrentRegisteredShapes()
            .concat(shapes.filter((shape) => {
            if (this.isRegisteredShape(shape)) {
                console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);
                return false;
            }
            return true;
        })));
    }
    unregisterShape(shape) {
        this.registeredShapesSubject.next(this.getCurrentRegisteredShapes().filter(registeredShape => registeredShape !== shape));
    }
    unregisterShapes(shapes) {
        this.registeredShapesSubject.next(this.getCurrentRegisteredShapes().filter(shape => shapes.indexOf(shape) === -1));
    }
}
CanvasWhiteboardShapeService.decorators = [
    { type: Injectable }
];
CanvasWhiteboardShapeService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1jYW52YXMtd2hpdGVib2FyZC9zcmMvbGliL3NoYXBlcy9jYW52YXMtd2hpdGVib2FyZC1zaGFwZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBTW5ELE1BQU0sT0FBTyw0QkFBNEI7SUFJdkM7UUFDRSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxlQUFlLENBQUM7WUFDakQsYUFBYTtZQUNiLFNBQVM7WUFDVCxjQUFjO1lBQ2QsV0FBVztZQUNYLFNBQVM7WUFDVCxXQUFXO1NBQ1osQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN2RSxDQUFDO0lBRUQsZ0NBQWdDLENBQUMsU0FBaUI7UUFDaEQsT0FBTyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUN0RCxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELDBCQUEwQjtRQUN4QixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBdUQ7UUFDdkUsT0FBTyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUF1RDtRQUNuRSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxLQUFLLHVDQUF1QyxDQUFDLENBQUM7WUFDNUYsT0FBTztTQUNSO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztRQUMzRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxjQUFjLENBQUMsTUFBK0Q7UUFDNUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FDL0IsSUFBSSxDQUFDLDBCQUEwQixFQUFFO2FBQzlCLE1BQU0sQ0FDTCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDdEIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEtBQUssdUNBQXVDLENBQUMsQ0FBQztnQkFDNUYsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQ0gsQ0FDSixDQUFDO0lBQ0osQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUF1RDtRQUNyRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUMvQixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEtBQUssS0FBSyxDQUFDLENBQ3ZGLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsTUFBK0Q7UUFDOUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FDL0IsSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUNoRixDQUFDO0lBQ0osQ0FBQzs7O1lBbkVGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkU2hhcGUgfSBmcm9tICcuL2NhbnZhcy13aGl0ZWJvYXJkLXNoYXBlJztcbmltcG9ydCB7IENpcmNsZVNoYXBlIH0gZnJvbSAnLi9jaXJjbGUtc2hhcGUnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlU2hhcGUgfSBmcm9tICcuL3JlY3RhbmdsZS1zaGFwZSc7XG5pbXBvcnQgeyBGcmVlSGFuZFNoYXBlIH0gZnJvbSAnLi9mcmVlLWhhbmQtc2hhcGUnO1xuaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtb3B0aW9ucyc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQgfSBmcm9tICcuLi9jYW52YXMtd2hpdGVib2FyZC1wb2ludC5tb2RlbCc7XG5pbXBvcnQgeyBTbWlsZXlTaGFwZSB9IGZyb20gJy4vc21pbGV5LXNoYXBlJztcbmltcG9ydCB7IFN0YXJTaGFwZSB9IGZyb20gJy4vc3Rhci1zaGFwZSc7XG5pbXBvcnQgeyBMaW5lU2hhcGUgfSBmcm9tICcuL2xpbmUtc2hhcGUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCB0eXBlIElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8VCBleHRlbmRzIENhbnZhc1doaXRlYm9hcmRTaGFwZT4gPVxuICBuZXcocG9zaXRpb25Qb2ludD86IENhbnZhc1doaXRlYm9hcmRQb2ludCwgb3B0aW9ucz86IENhbnZhc1doaXRlYm9hcmRTaGFwZU9wdGlvbnMsIC4uLmFyZ3M6IGFueVtdKSA9PiBUO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FudmFzV2hpdGVib2FyZFNoYXBlU2VydmljZSB7XG4gIHByaXZhdGUgcmVnaXN0ZXJlZFNoYXBlc1N1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxBcnJheTxJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlPENhbnZhc1doaXRlYm9hcmRTaGFwZT4+PjtcbiAgcHVibGljIHJlZ2lzdGVyZWRTaGFwZXMkOiBPYnNlcnZhYmxlPEFycmF5PElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPj4+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVnaXN0ZXJlZFNoYXBlc1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtcbiAgICAgIEZyZWVIYW5kU2hhcGUsXG4gICAgICBMaW5lU2hhcGUsXG4gICAgICBSZWN0YW5nbGVTaGFwZSxcbiAgICAgIENpcmNsZVNoYXBlLFxuICAgICAgU3RhclNoYXBlLFxuICAgICAgU21pbGV5U2hhcGVcbiAgICBdKTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTaGFwZXMkID0gdGhpcy5yZWdpc3RlcmVkU2hhcGVzU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldFNoYXBlQ29uc3RydWN0b3JGcm9tU2hhcGVOYW1lKHNoYXBlTmFtZTogc3RyaW5nKTogSU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50UmVnaXN0ZXJlZFNoYXBlcygpLmZpbmQoKHNoYXBlKSA9PlxuICAgICAgKG5ldyBzaGFwZSkuZ2V0U2hhcGVOYW1lKCkgPT09IHNoYXBlTmFtZSk7XG4gIH1cblxuICBnZXRDdXJyZW50UmVnaXN0ZXJlZFNoYXBlcygpOiBBcnJheTxJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlPENhbnZhc1doaXRlYm9hcmRTaGFwZT4+IHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlcmVkU2hhcGVzU3ViamVjdC5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgaXNSZWdpc3RlcmVkU2hhcGUoc2hhcGU6IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRSZWdpc3RlcmVkU2hhcGVzKCkuaW5kZXhPZihzaGFwZSkgIT09IC0xO1xuICB9XG5cbiAgcmVnaXN0ZXJTaGFwZShzaGFwZTogSU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNSZWdpc3RlcmVkU2hhcGUoc2hhcGUpKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFlvdSB0cmllZCB0byByZWdpc3RlciBhIHNoYXBlOiR7c2hhcGV9LCBidXQgaXMgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlZ2lzdGVyZWRTaGFwZXMgPSB0aGlzLmdldEN1cnJlbnRSZWdpc3RlcmVkU2hhcGVzKCk7XG4gICAgcmVnaXN0ZXJlZFNoYXBlcy5wdXNoKHNoYXBlKTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTaGFwZXNTdWJqZWN0Lm5leHQocmVnaXN0ZXJlZFNoYXBlcyk7XG4gIH1cblxuICByZWdpc3RlclNoYXBlcyhzaGFwZXM6IEFycmF5PElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPj4pOiB2b2lkIHtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTaGFwZXNTdWJqZWN0Lm5leHQoXG4gICAgICB0aGlzLmdldEN1cnJlbnRSZWdpc3RlcmVkU2hhcGVzKClcbiAgICAgICAgLmNvbmNhdChcbiAgICAgICAgICBzaGFwZXMuZmlsdGVyKChzaGFwZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWdpc3RlcmVkU2hhcGUoc2hhcGUpKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihgWW91IHRyaWVkIHRvIHJlZ2lzdGVyIGEgc2hhcGU6JHtzaGFwZX0sIGJ1dCBpcyBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQuYCk7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICk7XG4gIH1cblxuICB1bnJlZ2lzdGVyU2hhcGUoc2hhcGU6IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPik6IHZvaWQge1xuICAgIHRoaXMucmVnaXN0ZXJlZFNoYXBlc1N1YmplY3QubmV4dChcbiAgICAgIHRoaXMuZ2V0Q3VycmVudFJlZ2lzdGVyZWRTaGFwZXMoKS5maWx0ZXIocmVnaXN0ZXJlZFNoYXBlID0+IHJlZ2lzdGVyZWRTaGFwZSAhPT0gc2hhcGUpXG4gICAgKTtcbiAgfVxuXG4gIHVucmVnaXN0ZXJTaGFwZXMoc2hhcGVzOiBBcnJheTxJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlPENhbnZhc1doaXRlYm9hcmRTaGFwZT4+KTogdm9pZCB7XG4gICAgdGhpcy5yZWdpc3RlcmVkU2hhcGVzU3ViamVjdC5uZXh0KFxuICAgICAgdGhpcy5nZXRDdXJyZW50UmVnaXN0ZXJlZFNoYXBlcygpLmZpbHRlcihzaGFwZSA9PiBzaGFwZXMuaW5kZXhPZihzaGFwZSkgPT09IC0xKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==