import { Component, Output, EventEmitter, ViewChild, ElementRef, Input } from '@angular/core';
export class CanvasWhiteboardColorPickerComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.selectedColor = 'rgba(0,0,0,1)';
        this.showColorPicker = false;
        this.onToggleColorPicker = new EventEmitter();
        this.onColorSelected = new EventEmitter();
        this.onSecondaryColorSelected = new EventEmitter();
    }
    /**
     * Initialize the canvas drawing context. If we have an aspect ratio set up, the canvas will resize
     * according to the aspect ratio.
     */
    ngOnInit() {
        this._context = this.canvas.nativeElement.getContext('2d');
        this.createColorPalette();
    }
    createColorPalette() {
        let gradient = this._context.createLinearGradient(0, 0, this._context.canvas.width, 0);
        gradient.addColorStop(0, 'rgb(255, 0, 0)');
        gradient.addColorStop(0.15, 'rgb(255, 0, 255)');
        gradient.addColorStop(0.33, 'rgb(0, 0, 255)');
        gradient.addColorStop(0.49, 'rgb(0, 255, 255)');
        gradient.addColorStop(0.67, 'rgb(0, 255, 0)');
        gradient.addColorStop(0.84, 'rgb(255, 255, 0)');
        gradient.addColorStop(1, 'rgb(255, 0, 0)');
        this._context.fillStyle = gradient;
        this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);
        gradient = this._context.createLinearGradient(0, 0, 0, this._context.canvas.height);
        gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
        gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0)');
        gradient.addColorStop(0.5, 'rgba(0, 0, 0, 0)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 1)');
        this._context.fillStyle = gradient;
        this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);
    }
    closeOnExternalClick(event) {
        if (!this.elementRef.nativeElement.contains(event.target) && this.showColorPicker) {
            this.onToggleColorPicker.emit(false);
        }
    }
    toggleColorPicker(event) {
        if (event) {
            event.preventDefault();
        }
        this.onToggleColorPicker.emit(!this.showColorPicker);
    }
    determineColorFromCanvas(event) {
        const canvasRect = this._context.canvas.getBoundingClientRect();
        const imageData = this._context.getImageData(event.clientX - canvasRect.left, event.clientY - canvasRect.top, 1, 1);
        return `rgba(${imageData.data[0]}, ${imageData.data[1]}, ${imageData.data[2]}, ${imageData.data[3]})`;
    }
    selectColor(color) {
        this.onColorSelected.emit(color);
        this.toggleColorPicker(null);
    }
}
CanvasWhiteboardColorPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'canvas-whiteboard-colorpicker',
                host: {
                    '(document:mousedown)': 'closeOnExternalClick($event)',
                    '(document:touchstart)': 'closeOnExternalClick($event)'
                },
                template: `
    <div [hidden]="showColorPicker" class="canvas-whiteboard-colorpicker-input"
         (click)="toggleColorPicker($event)">
      <div class="selected-color-type-wrapper">{{previewText}}</div>
      <div class="selected-color-preview" [style.background]="selectedColor"></div>
    </div>
    <div [hidden]="!showColorPicker" class="canvas-whiteboard-colorpicker-wrapper">
      <div (click)="selectColor('transparent')" class="transparent-color">Transparent</div>
      <canvas #canvaswhiteboardcolorpicker class="canvas-whiteboard-colorpicker" width="284" height="155"
              (click)="selectColor(determineColorFromCanvas($event))"></canvas>
    </div>
  `,
                styles: [`
    .selected-color-preview {
      width: 100%;
      height: 20%;
      position: absolute;
      bottom: 0;
      left: 0;
    }

    .selected-color-type-wrapper {
      display: inline-block;
      height: 100%;
      width: 100%;
      text-align: center;
      font-size: 14px;
      color: #000;
    }

    .transparent-color {
      font-size: 14px;
    }

    .canvas-whiteboard-colorpicker-wrapper {
      border: 1px solid #afafaf;
      color: #000;
    }

    @media (min-width: 401px) {
      .canvas-whiteboard-colorpicker-wrapper {
        position: absolute;
      }
    }

    .canvas-whiteboard-colorpicker-input {
      display: inline-block;
      position: relative;
      width: 44px;
      height: 44px;
      margin: 5px;
      cursor: pointer;
      color: #000;
    }
  `]
            },] }
];
CanvasWhiteboardColorPickerComponent.ctorParameters = () => [
    { type: ElementRef }
];
CanvasWhiteboardColorPickerComponent.propDecorators = {
    previewText: [{ type: Input }],
    selectedColor: [{ type: Input }],
    canvas: [{ type: ViewChild, args: ['canvaswhiteboardcolorpicker', { static: true },] }],
    showColorPicker: [{ type: Input }],
    onToggleColorPicker: [{ type: Output }],
    onColorSelected: [{ type: Output }],
    onSecondaryColorSelected: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,