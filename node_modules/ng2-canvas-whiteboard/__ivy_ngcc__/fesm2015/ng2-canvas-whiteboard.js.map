{"version":3,"file":"ng2-canvas-whiteboard.js","sources":["../../../projects/ng2-canvas-whiteboard/src/lib/canvas-whiteboard-update.model.ts","../../../projects/ng2-canvas-whiteboard/src/lib/template.ts","../../../projects/ng2-canvas-whiteboard/src/lib/canvas-whiteboard.service.ts","../../../projects/ng2-canvas-whiteboard/src/lib/canvas-whiteboard-point.model.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/canvas-whiteboard-shape-options.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/canvas-whiteboard-shape.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/circle-shape.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/rectangle-shape.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/free-hand-shape.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/smiley-shape.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/star-shape.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/line-shape.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/canvas-whiteboard-shape.service.ts","../../../projects/ng2-canvas-whiteboard/src/lib/canvas-whiteboard.component.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/canvas-whiteboard-shape-selector.component.ts","../../../projects/ng2-canvas-whiteboard/src/lib/canvas-whiteboard-colorpicker.component.ts","../../../projects/ng2-canvas-whiteboard/src/lib/shapes/canvas-whiteboard-shape-preview.component.ts","../../../projects/ng2-canvas-whiteboard/src/lib/ng2-canvas-whiteboard.module.ts","../../../projects/ng2-canvas-whiteboard/src/public-api.ts","../../../projects/ng2-canvas-whiteboard/src/ng2-canvas-whiteboard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAY,0BAIX;AAJD,WAAY,0BAA0B;AACrC,IAAC,6EAAS,CAAA;AAAC,IACV,2EAAQ,CAAA;AAAC,IACT,2EAAQ,CAAA;AACV,CAAC,EAJW,0BAA0B,KAA1B,0BAA0B,QAIrC;AACD,MACa,sBAAsB;AACnC,IAyBE,YAAY,CAAU,EACV,CAAU,EACV,IAAiC,EACjC,IAAa,EACb,aAAsB,EACtB,oBAAmD;AACjE,QAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,QAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,QAAI,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;AACvC,QAAI,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;AACrD,KAAG;AACH,IA9BE,OAAO,eAAe,CAAC,IAAS;AAAI,QAClC,IAAI,UAAU,CAAC;AACnB,QAAI,IAAI;AACR,YAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACpC,YAAM,OAAO,IAAI,sBAAsB,CAC/B,UAAU,CAAC,GAAG,CAAC,EACf,UAAU,CAAC,GAAG,CAAC,EACf,UAAU,CAAC,MAAM,CAAC,EAClB,UAAU,CAAC,MAAM,CAAC,EAClB,UAAU,CAAC,eAAe,CAAC,EAC3B,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAC5C,SAAK;AAAC,QAAA,OAAO,CAAC,EAAE;AAChB,YAAM,OAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;AACrE,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,KAAG;AACH,IAeE,SAAS;AAAK,QACZ,MAAM,iBAAiB,GAAG;AAC9B,YAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;AAC1B,YAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;AAC1B,YAAM,IAAI,EAAE,IAAI,CAAC,IAAI;AACrB,YAAM,IAAI,EAAE,IAAI,CAAC,IAAI;AACrB,YAAM,aAAa,EAAE,IAAI,CAAC,aAAa;AACvC,SAAK,CAAC;AACN,QACI,IAAI,IAAI,CAAC,oBAAoB,EAAE;AACnC,YAAM,iBAAiB,CAAC,sBAAsB,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC;AAC5E,SAAK;AACL,QACI,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;AAC7C,KAAG;AACH;AACA;AAAC,MChEY,cAAc,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAC,MCxFY,uBAAuB;AACpC,IAFA;AACE,QACQ,uBAAkB,GAAsC,IAAI,OAAO,EAAE,CAAC;AAChF,QAAE,uBAAkB,GAAyC,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AACpG,QACU,wBAAmB,GAAiB,IAAI,OAAO,EAAE,CAAC;AAC5D,QAAE,wBAAmB,GAAoB,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;AACjF,QACU,uBAAkB,GAAiB,IAAI,OAAO,EAAE,CAAC;AAC3D,QAAE,uBAAkB,GAAoB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC/E,QACU,u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","sourcesContent":["import {CanvasWhiteboardShapeOptions} from \"./shapes/canvas-whiteboard-shape-options\";\n\nexport enum CanvasWhiteboardUpdateType {\n  START = 0,\n  DRAG = 1,\n  STOP = 2\n}\n\nexport class CanvasWhiteboardUpdate {\n  x: number;\n  y: number;\n  type: CanvasWhiteboardUpdateType;\n  UUID: string;\n\n  selectedShape: string;\n  selectedShapeOptions: CanvasWhiteboardShapeOptions;\n\n  static deserializeJson(json: any): CanvasWhiteboardUpdate {\n    let parsedJson;\n    try {\n      parsedJson = JSON.parse(json);\n      return new CanvasWhiteboardUpdate(\n        parsedJson['x'],\n        parsedJson['y'],\n        parsedJson['type'],\n        parsedJson['uuid'],\n        parsedJson['selectedShape'],\n        parsedJson['selectedShapeOptions']);\n    } catch (e) {\n      console.error(\"The canvas whiteboard update is not parseable\");\n      return null;\n    }\n  }\n\n  constructor(x?: number,\n              y?: number,\n              type?: CanvasWhiteboardUpdateType,\n              UUID?: string,\n              selectedShape?: string,\n              selectedShapeOptions?: CanvasWhiteboardShapeOptions) {\n    this.x = x;\n    this.y = y;\n    this.type = type;\n    this.UUID = UUID;\n    this.selectedShape = selectedShape;\n    this.selectedShapeOptions = selectedShapeOptions;\n  }\n\n  stringify(): string {\n    const objectToSerialize = {\n      x: this.x.toFixed(3),\n      y: this.y.toFixed(3),\n      type: this.type,\n      uuid: this.UUID,\n      selectedShape: this.selectedShape\n    };\n\n    if (this.selectedShapeOptions) {\n      objectToSerialize['selectedShapeOptions'] = this.selectedShapeOptions;\n    }\n\n    return JSON.stringify(objectToSerialize);\n  }\n}\n","export const DEFAULT_STYLES = `\n.canvas_whiteboard_button {\n    display: inline-block;\n    outline: 0px;\n    padding-top: 7px;\n    margin-bottom: 0;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.42857143;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    -ms-touch-action: manipulation;\n    touch-action: manipulation;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    background-image: none;\n    border: 1px solid transparent;\n    border-radius: 4px;\n}\n\n.canvas_whiteboard_buttons {\n    z-index: 3;\n}\n\n@media (max-width: 400px) {\n     .canvas_whiteboard_buttons {\n            position: absolute;\n            z-inde\n            top: 0;\n            width: 100%;\n            text-align: center;\n      }\n}\n\n@media (min-width: 401px) {\n    .canvas_whiteboard_buttons {\n        position: absolute;\n        right: 0%;\n        color: #fff;\n    }\n}\n\n.canvas_whiteboard_buttons {\n    padding: 5px;\n}\n\n.canvas_whiteboard_buttons > button {\n    margin: 5px;\n}\n\n.canvas_whiteboard_button-draw_animated {\n    -webkit-animation: pulsate 1s ease-out;\n    -webkit-animation-iteration-count: infinite;\n}\n\n@-webkit-keyframes pulsate {\n    0% {\n        -webkit-transform: scale(0.1, 0.1);\n        opacity: 0.0;\n    }\n    50% {\n        opacity: 1.0;\n    }\n    100% {\n        -webkit-transform: scale(1.2, 1.2);\n        opacity: 0.0;\n    }\n}\n.canvas_wrapper_div {\n    width: 100%;\n    height: 100%;\n    border: 0.5px solid #e2e2e2;\n}\n\n.canvas_whiteboard_button-clear {\n    padding-top: 5px;\n}\n\n.canvas_whiteboard {\n    position: absolute;\n    z-index: 1;\n}\n\n.incomplete_shapes_canvas_whiteboard {\n    position: absolute;\n    z-index: 2;\n}\n\n`;\n","import { Injectable } from '@angular/core';\nimport { CanvasWhiteboardUpdate } from './canvas-whiteboard-update.model';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable()\nexport class CanvasWhiteboardService {\n  private _canvasDrawSubject: Subject<CanvasWhiteboardUpdate[]> = new Subject();\n  canvasDrawSubject$: Observable<CanvasWhiteboardUpdate[]> = this._canvasDrawSubject.asObservable();\n\n  private _canvasClearSubject: Subject<any> = new Subject();\n  canvasClearSubject$: Observable<any> = this._canvasClearSubject.asObservable();\n\n  private _canvasUndoSubject: Subject<any> = new Subject();\n  canvasUndoSubject$: Observable<any> = this._canvasUndoSubject.asObservable();\n\n  private _canvasRedoSubject: Subject<any> = new Subject();\n  canvasRedoSubject$: Observable<any> = this._canvasRedoSubject.asObservable();\n\n  public drawCanvas(updates: CanvasWhiteboardUpdate[]): void {\n    this._canvasDrawSubject.next(updates);\n  }\n\n  public clearCanvas(): void {\n    this._canvasClearSubject.next();\n  }\n\n  public undoCanvas(updateUUD: string): void {\n    this._canvasUndoSubject.next(updateUUD);\n  }\n\n  public redoCanvas(updateUUD: string): void {\n    this._canvasRedoSubject.next(updateUUD);\n  }\n}\n","export class CanvasWhiteboardPoint {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","export class CanvasWhiteboardShapeOptions {\n  shouldFillShape?: boolean;\n  fillStyle?: string;\n  strokeStyle?: string;\n  lineWidth?: number;\n  lineJoin?: string;\n  lineCap?: string;\n\n  constructor() {\n    this.shouldFillShape = false;\n    this.fillStyle = null;\n    this.strokeStyle = 'rgba(0, 0, 0, 1)';\n    this.lineWidth = 2;\n    this.lineJoin = 'round';\n    this.lineCap = 'round';\n  }\n}\n","import { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardUpdate } from '../canvas-whiteboard-update.model';\n\nexport abstract class CanvasWhiteboardShape {\n  isVisible: boolean;\n  protected positionPoint: CanvasWhiteboardPoint;\n  protected options: CanvasWhiteboardShapeOptions;\n\n  protected constructor(positionPoint?: CanvasWhiteboardPoint,\n                        options?: CanvasWhiteboardShapeOptions) {\n    this.positionPoint = positionPoint || new CanvasWhiteboardPoint(0, 0);\n    this.options = options || new CanvasWhiteboardShapeOptions();\n    this.isVisible = true;\n  }\n\n  abstract getShapeName(): string;\n\n  abstract onUpdateReceived(update: CanvasWhiteboardUpdate): void;\n\n  // noinspection TsLint\n  onStopReceived(update: CanvasWhiteboardUpdate): void {\n  }\n\n  abstract draw(context: CanvasRenderingContext2D): void;\n\n  abstract drawPreview(context: CanvasRenderingContext2D): void;\n}\n","import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardUpdate } from '../canvas-whiteboard-update.model';\n\nexport class CircleShape extends CanvasWhiteboardShape {\n  radius: number;\n\n  constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, radius?: number) {\n    super(positionPoint, options);\n    this.radius = radius || 0;\n  }\n\n  getShapeName(): string {\n    return 'CircleShape';\n  }\n\n  draw(context: CanvasRenderingContext2D): void {\n    context.beginPath();\n    context.arc(this.positionPoint.x, this.positionPoint.y, this.radius, 0, Math.PI * 2, false);\n\n    Object.assign(context, this.options);\n\n    context.stroke();\n    if (this.options.shouldFillShape) {\n      context.fill();\n    }\n\n    context.closePath();\n  }\n\n  drawPreview(context: CanvasRenderingContext2D): void {\n    this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n    this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n    this.draw(context);\n  }\n\n  onUpdateReceived(update: CanvasWhiteboardUpdate): void {\n    this.radius = this.calculateRadius(update.x, update.y);\n  }\n\n  calculateRadius(x: number, y: number): number {\n    return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n  }\n}\n","import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardUpdate } from '../canvas-whiteboard-update.model';\n\nexport class RectangleShape extends CanvasWhiteboardShape {\n  width: number;\n  height: number;\n\n  constructor(positionPoint?: CanvasWhiteboardPoint,\n              options?: CanvasWhiteboardShapeOptions,\n              width?: number,\n              height?: number) {\n    super(positionPoint, options);\n    this.width = width || 0;\n    this.height = height || 0;\n  }\n\n  getShapeName(): string {\n    return 'RectangleShape';\n  }\n\n  draw(context: CanvasRenderingContext2D): void {\n    if (!this.width || !this.height) {\n      return;\n    }\n    context.beginPath();\n\n    Object.assign(context, this.options);\n\n    context.rect(this.positionPoint.x, this.positionPoint.y, this.width, this.height);\n\n    context.stroke();\n    if (this.options.shouldFillShape) {\n      context.fill();\n    }\n\n    context.closePath();\n  }\n\n  drawPreview(context: CanvasRenderingContext2D): void {\n    this.positionPoint = new CanvasWhiteboardPoint(2, 2);\n    this.width = context.canvas.width - 4;\n    this.height = context.canvas.height - 4;\n    this.draw(context);\n  }\n\n  onUpdateReceived(update: CanvasWhiteboardUpdate): void {\n    this.width = update.x - this.positionPoint.x;\n    this.height = update.y - this.positionPoint.y;\n  }\n}\n","import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardUpdate } from '../canvas-whiteboard-update.model';\n\nexport class FreeHandShape extends CanvasWhiteboardShape {\n  linePositions: CanvasWhiteboardPoint[];\n\n  constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions) {\n    super(positionPoint, options);\n    this.linePositions = [];\n  }\n\n  getShapeName(): string {\n    return 'FreeHandShape';\n  }\n\n  draw(context: CanvasRenderingContext2D): void {\n    Object.assign(context, this.options);\n\n    context.beginPath();\n    context.moveTo(this.positionPoint.x, this.positionPoint.y);\n    // Draw a dot\n    context.lineTo(this.positionPoint.x + 1, this.positionPoint.y + 1);\n\n    // Normal fastest free hand drawing\n    // this.linePositions.forEach((linePosition) => {\n    //     context.lineTo(linePosition.x, linePosition.y);\n    // });\n\n    // Quadratic curves drawing\n    let i = 0;\n    while (i < this.linePositions.length) {\n      if (this.linePositions.length - i > 2) {\n        const controlPoint1 = this.linePositions[i];\n        const controlPoint2 = this.linePositions[i + 1];\n        const endPoint = this.linePositions[i + 2];\n        context.bezierCurveTo(controlPoint1.x,\n          controlPoint1.y,\n          controlPoint2.x,\n          controlPoint2.y,\n          endPoint.x,\n          endPoint.y);\n        i += 2;\n      } else {\n        const linePosition = this.linePositions[i];\n        context.lineTo(linePosition.x, linePosition.y);\n        i += 1;\n      }\n    }\n\n    context.stroke();\n  }\n\n  drawPreview(context: CanvasRenderingContext2D): void {\n    this.positionPoint = new CanvasWhiteboardPoint(2, 2);\n    this.linePositions = [\n      new CanvasWhiteboardPoint(context.canvas.width - 5, context.canvas.height * 0.3),\n      // new CanvasWhiteboardPoint(context.canvas.width * 0.4, context.canvas.height * 0.6),\n      new CanvasWhiteboardPoint(context.canvas.width * 0.2, context.canvas.height * 0.4),\n      new CanvasWhiteboardPoint(context.canvas.width * 0.6, context.canvas.height * 0.8),\n      new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height)\n    ];\n\n    this.draw(context);\n  }\n\n  onUpdateReceived(update: CanvasWhiteboardUpdate): void {\n    this.linePositions.push(new CanvasWhiteboardPoint(update.x, update.y));\n  }\n}\n","import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardUpdate } from '../canvas-whiteboard-update.model';\n\nexport class SmileyShape extends CanvasWhiteboardShape {\n  radius: number;\n\n  constructor(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, radius?: number) {\n    super(positionPoint, options);\n    this.options.shouldFillShape = true;\n    this.options.fillStyle = this.options.fillStyle || 'yellow';\n\n    this.radius = radius || 0;\n  }\n\n  getShapeName(): string {\n    return 'SmileyShape';\n  }\n\n  draw(context: CanvasRenderingContext2D): void {\n    context.beginPath();\n\n    Object.assign(context, this.options);\n\n    context.arc(this.positionPoint.x, this.positionPoint.y, this.radius, 0, Math.PI * 2, false);\n    context.fill();\n    context.stroke();\n\n    context.beginPath();\n    const leftEyeX = this.positionPoint.x - this.radius * 0.3;\n    const rightEyeX = this.positionPoint.x + this.radius * 0.3;\n    const eyesY = this.positionPoint.y - this.radius * 0.2;\n    const eyeSize = this.radius * 0.1;\n\n    context.arc(leftEyeX, eyesY, eyeSize, 0, 2 * Math.PI, false);\n    context.arc(rightEyeX, eyesY, eyeSize, 0, 2 * Math.PI, false);\n    context.fillStyle = this.options.strokeStyle;\n    context.fill();\n\n    // draw the mouth\n    context.beginPath();\n    context.arc(this.positionPoint.x, this.positionPoint.y, this.radius * 0.7, 0, Math.PI, false);\n    context.stroke();\n\n    context.closePath();\n  }\n\n  drawPreview(context: CanvasRenderingContext2D): void {\n    this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n    this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n    this.draw(context);\n  }\n\n  onUpdateReceived(update: CanvasWhiteboardUpdate): void {\n    this.radius = this.calculateRadius(update.x, update.y);\n  }\n\n  calculateRadius(x: number, y: number): number {\n    return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n  }\n}\n","import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardUpdate } from '../canvas-whiteboard-update.model';\n\nexport class StarShape extends CanvasWhiteboardShape {\n  radius: number;\n  spikes: number;\n\n  constructor(positionPoint?: CanvasWhiteboardPoint,\n              options?: CanvasWhiteboardShapeOptions,\n              radius?: number,\n              spikes?: number) {\n    super(positionPoint, options);\n    this.radius = radius || 0;\n    this.spikes = spikes || 5;\n  }\n\n  getShapeName(): string {\n    return 'StarShape';\n  }\n\n  draw(context: CanvasRenderingContext2D): void {\n    Object.assign(context, this.options);\n\n    let rotation = Math.PI / 2 * 3;\n    let spikeX = this.positionPoint.x;\n    let spikeY = this.positionPoint.y;\n    const step = Math.PI / this.spikes;\n\n    context.beginPath();\n    context.moveTo(this.positionPoint.x, this.positionPoint.y - this.radius);\n\n    for (let i = 0; i < this.spikes; i++) {\n      spikeX = this.positionPoint.x + Math.cos(rotation) * this.radius;\n      spikeY = this.positionPoint.y + Math.sin(rotation) * this.radius;\n      context.lineTo(spikeX, spikeY);\n      rotation += step;\n\n      spikeX = this.positionPoint.x + Math.cos(rotation) * (this.radius * 0.4);\n      spikeY = this.positionPoint.y + Math.sin(rotation) * (this.radius * 0.4);\n      context.lineTo(spikeX, spikeY);\n      rotation += step;\n      context.stroke();\n    }\n\n    context.lineTo(this.positionPoint.x, this.positionPoint.y - this.radius);\n    context.closePath();\n\n    context.stroke();\n\n    if (this.options.shouldFillShape) {\n      context.fill();\n    }\n  }\n\n  drawPreview(context: CanvasRenderingContext2D): void {\n    this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);\n    this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);\n    this.draw(context);\n  }\n\n  onUpdateReceived(update: CanvasWhiteboardUpdate): void {\n    this.radius = this.calculateRadius(update.x, update.y);\n  }\n\n  calculateRadius(x: number, y: number): number {\n    return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));\n  }\n}\n","import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardUpdate } from '../canvas-whiteboard-update.model';\n\nexport class LineShape extends CanvasWhiteboardShape {\n  endPosition: CanvasWhiteboardPoint;\n\n  constructor(positionPoint?: CanvasWhiteboardPoint,\n              options?: CanvasWhiteboardShapeOptions,\n              endPosition?: CanvasWhiteboardPoint) {\n    super(positionPoint, options);\n    this.endPosition = endPosition || new CanvasWhiteboardPoint(this.positionPoint.x, this.positionPoint.y);\n  }\n\n  getShapeName(): string {\n    return 'LineShape';\n  }\n\n  draw(context: CanvasRenderingContext2D): void {\n    if (!this.endPosition) {\n      return;\n    }\n    context.beginPath();\n    Object.assign(context, this.options);\n\n    context.moveTo(this.positionPoint.x, this.positionPoint.y);\n    context.lineTo(this.endPosition.x, this.endPosition.y);\n\n    context.closePath();\n    context.stroke();\n  }\n\n  drawPreview(context: CanvasRenderingContext2D): void {\n    this.positionPoint = new CanvasWhiteboardPoint(0, 0);\n    this.endPosition = new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height);\n    this.draw(context);\n  }\n\n  onUpdateReceived(update: CanvasWhiteboardUpdate): void {\n    this.endPosition = new CanvasWhiteboardPoint(update.x, update.y);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CircleShape } from './circle-shape';\nimport { RectangleShape } from './rectangle-shape';\nimport { FreeHandShape } from './free-hand-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { SmileyShape } from './smiley-shape';\nimport { StarShape } from './star-shape';\nimport { LineShape } from './line-shape';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport type INewCanvasWhiteboardShape<T extends CanvasWhiteboardShape> =\n  new(positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, ...args: any[]) => T;\n\n@Injectable()\nexport class CanvasWhiteboardShapeService {\n  private registeredShapesSubject: BehaviorSubject<Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>>;\n  public registeredShapes$: Observable<Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>>;\n\n  constructor() {\n    this.registeredShapesSubject = new BehaviorSubject([\n      FreeHandShape,\n      LineShape,\n      RectangleShape,\n      CircleShape,\n      StarShape,\n      SmileyShape\n    ]);\n    this.registeredShapes$ = this.registeredShapesSubject.asObservable();\n  }\n\n  getShapeConstructorFromShapeName(shapeName: string): INewCanvasWhiteboardShape<CanvasWhiteboardShape> {\n    return this.getCurrentRegisteredShapes().find((shape) =>\n      (new shape).getShapeName() === shapeName);\n  }\n\n  getCurrentRegisteredShapes(): Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>> {\n    return this.registeredShapesSubject.getValue();\n  }\n\n  isRegisteredShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): boolean {\n    return this.getCurrentRegisteredShapes().indexOf(shape) !== -1;\n  }\n\n  registerShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): void {\n    if (this.isRegisteredShape(shape)) {\n      console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);\n      return;\n    }\n\n    const registeredShapes = this.getCurrentRegisteredShapes();\n    registeredShapes.push(shape);\n    this.registeredShapesSubject.next(registeredShapes);\n  }\n\n  registerShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>): void {\n    this.registeredShapesSubject.next(\n      this.getCurrentRegisteredShapes()\n        .concat(\n          shapes.filter((shape) => {\n            if (this.isRegisteredShape(shape)) {\n              console.warn(`You tried to register a shape:${shape}, but is has already been registered.`);\n              return false;\n            }\n\n            return true;\n          })\n        )\n    );\n  }\n\n  unregisterShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): void {\n    this.registeredShapesSubject.next(\n      this.getCurrentRegisteredShapes().filter(registeredShape => registeredShape !== shape)\n    );\n  }\n\n  unregisterShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>): void {\n    this.registeredShapesSubject.next(\n      this.getCurrentRegisteredShapes().filter(shape => shapes.indexOf(shape) === -1)\n    );\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  ElementRef,\n  OnInit,\n  OnChanges, OnDestroy, AfterViewInit, NgZone, ChangeDetectorRef\n} from '@angular/core';\nimport { CanvasWhiteboardUpdate, CanvasWhiteboardUpdateType } from './canvas-whiteboard-update.model';\nimport { DEFAULT_STYLES } from './template';\nimport { CanvasWhiteboardService } from './canvas-whiteboard.service';\nimport { CanvasWhiteboardOptions } from './canvas-whiteboard-options';\nimport { CanvasWhiteboardShape } from './shapes/canvas-whiteboard-shape';\nimport { CanvasWhiteboardPoint } from './canvas-whiteboard-point.model';\nimport { CanvasWhiteboardShapeService, INewCanvasWhiteboardShape } from './shapes/canvas-whiteboard-shape.service';\nimport { CanvasWhiteboardShapeOptions } from './shapes/canvas-whiteboard-shape-options';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { cloneDeep, isEqual } from 'lodash-es';\n\n@Component({\n  selector: 'canvas-whiteboard',\n  template:\n      `\n    <div class=\"canvas_wrapper_div\">\n      <div class=\"canvas_whiteboard_buttons\">\n        <canvas-whiteboard-shape-selector *ngIf=\"shapeSelectorEnabled\"\n                                          [showShapeSelector]=\"showShapeSelector\"\n                                          [selectedShapeConstructor]=\"selectedShapeConstructor\"\n                                          [shapeOptions]=\"generateShapePreviewOptions()\"\n                                          (onToggleShapeSelector)=\"toggleShapeSelector($event)\"\n                                          (onShapeSelected)=\"selectShape($event)\"></canvas-whiteboard-shape-selector>\n\n        <canvas-whiteboard-colorpicker *ngIf=\"colorPickerEnabled || fillColorPickerEnabled\"\n                                       [previewText]=\"fillColorPickerText\"\n                                       [showColorPicker]=\"showFillColorPicker\"\n                                       [selectedColor]=\"fillColor\"\n                                       (onToggleColorPicker)=\"toggleFillColorPicker($event)\"\n                                       (onColorSelected)=\"changeFillColor($event)\">\n        </canvas-whiteboard-colorpicker>\n\n        <canvas-whiteboard-colorpicker *ngIf=\"colorPickerEnabled || strokeColorPickerEnabled\"\n                                       [previewText]=\"strokeColorPickerText\"\n                                       [showColorPicker]=\"showStrokeColorPicker\"\n                                       [selectedColor]=\"strokeColor\"\n                                       (onToggleColorPicker)=\"toggleStrokeColorPicker($event)\"\n                                       (onColorSelected)=\"changeStrokeColor($event)\">\n        </canvas-whiteboard-colorpicker>\n\n\n        <button *ngIf=\"drawButtonEnabled\" (click)=\"toggleDrawingEnabled()\"\n                [class.canvas_whiteboard_button-draw_animated]=\"getDrawingEnabled()\"\n                class=\"canvas_whiteboard_button canvas_whiteboard_button-draw\" type=\"button\">\n          <i [class]=\"drawButtonClass\" aria-hidden=\"true\"></i> {{drawButtonText}}\n        </button>\n\n        <button *ngIf=\"clearButtonEnabled\" (click)=\"clearCanvasLocal()\" type=\"button\"\n                class=\"canvas_whiteboard_button canvas_whiteboard_button-clear\">\n          <i [class]=\"clearButtonClass\" aria-hidden=\"true\"></i> {{clearButtonText}}\n        </button>\n\n        <button *ngIf=\"undoButtonEnabled\" (click)=\"undoLocal()\" type=\"button\"\n                class=\"canvas_whiteboard_button canvas_whiteboard_button-undo\">\n          <i [class]=\"undoButtonClass\" aria-hidden=\"true\"></i> {{undoButtonText}}\n        </button>\n\n        <button *ngIf=\"redoButtonEnabled\" (click)=\"redoLocal()\" type=\"button\"\n                class=\"canvas_whiteboard_button canvas_whiteboard_button-redo\">\n          <i [class]=\"redoButtonClass\" aria-hidden=\"true\"></i> {{redoButtonText}}\n        </button>\n        <button *ngIf=\"saveDataButtonEnabled\" (click)=\"saveLocal()\" type=\"button\"\n                class=\"canvas_whiteboard_button canvas_whiteboard_button-save\">\n          <i [class]=\"saveDataButtonClass\" aria-hidden=\"true\"></i> {{saveDataButtonText}}\n        </button>\n      </div>\n      <canvas #canvas class=\"canvas_whiteboard\"></canvas>\n      <canvas #incompleteShapesCanvas class=\"incomplete_shapes_canvas_whiteboard\"\n              (mousedown)=\"canvasUserEvents($event)\" (mouseup)=\"canvasUserEvents($event)\"\n              (mousemove)=\"canvasUserEvents($event)\" (mouseout)=\"canvasUserEvents($event)\"\n              (touchstart)=\"canvasUserEvents($event)\" (touchmove)=\"canvasUserEvents($event)\"\n              (touchend)=\"canvasUserEvents($event)\" (touchcancel)=\"canvasUserEvents($event)\"></canvas>\n    </div>\n  `,\n  styles: [DEFAULT_STYLES]\n})\nexport class CanvasWhiteboardComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n  @Input() options: CanvasWhiteboardOptions;\n\n  // Number of ms to wait before sending out the updates as an array\n  @Input() batchUpdateTimeoutDuration = 100;\n\n  private _imageUrl: string;\n  @Input() set imageUrl(imageUrl: string) {\n    this._imageUrl = imageUrl;\n    this._imageElement = null;\n    this._redrawHistory();\n  }\n\n  get imageUrl(): string {\n    return this._imageUrl;\n  }\n\n  @Input() aspectRatio: number;\n  @Input() drawButtonClass: string;\n  @Input() clearButtonClass: string;\n  @Input() undoButtonClass: string;\n  @Input() redoButtonClass: string;\n  @Input() saveDataButtonClass: string;\n  @Input() drawButtonText = '';\n  @Input() clearButtonText = '';\n  @Input() undoButtonText = '';\n  @Input() redoButtonText = '';\n  @Input() saveDataButtonText = '';\n  @Input() strokeColorPickerText = 'Stroke';\n  @Input() fillColorPickerText = 'Fill';\n  @Input() drawButtonEnabled = true;\n  @Input() clearButtonEnabled = true;\n  @Input() undoButtonEnabled = false;\n  @Input() redoButtonEnabled = false;\n  @Input() saveDataButtonEnabled = false;\n  @Input() shouldDownloadDrawing = true;\n  /** @deprecated. Replaced with strokeColorPickerEnabled and fillColorPickerEnabled inputs */\n  @Input() colorPickerEnabled: boolean = false;\n  @Input() strokeColorPickerEnabled: boolean = false;\n  @Input() fillColorPickerEnabled: boolean = false;\n  @Input() lineWidth = 2;\n  @Input() strokeColor = 'rgba(0, 0, 0, 1)';\n  @Input() startingColor = '#fff';\n  @Input() scaleFactor = 0;\n  @Input() drawingEnabled = false;\n  @Input() showStrokeColorPicker = false;\n  @Input() showFillColorPicker = false;\n  @Input() downloadedFileName: string;\n\n  @Input() lineJoin = 'round';\n  @Input() lineCap = 'round';\n  @Input() shapeSelectorEnabled = true;\n  @Input() showShapeSelector = false;\n  @Input() fillColor = 'rgba(0,0,0,0)';\n\n  @Output() onClear = new EventEmitter<any>();\n  @Output() onUndo = new EventEmitter<any>();\n  @Output() onRedo = new EventEmitter<any>();\n  @Output() onBatchUpdate = new EventEmitter<CanvasWhiteboardUpdate[]>();\n  @Output() onImageLoaded = new EventEmitter<any>();\n  @Output() onSave = new EventEmitter<string | Blob>();\n\n  @ViewChild('canvas', {static: true}) canvas: ElementRef;\n  context: CanvasRenderingContext2D;\n\n  @ViewChild('incompleteShapesCanvas', {static: true}) private _incompleteShapesCanvas: ElementRef;\n  private _incompleteShapesCanvasContext: CanvasRenderingContext2D;\n  private _incompleteShapesMap: Map<string, CanvasWhiteboardShape>;\n\n  private _imageElement: any;\n\n  private _canDraw = true;\n\n  private _clientDragging = false;\n\n  private _updateHistory: CanvasWhiteboardUpdate[] = [];\n  private _lastUUID: string;\n  private _shapesMap: Map<string, CanvasWhiteboardShape>;\n\n  private _undoStack: string[] = []; // Stores the value of start and count for each continuous stroke\n  private _redoStack: string[] = [];\n  private _batchUpdates: CanvasWhiteboardUpdate[] = [];\n  private _updatesNotDrawn: any = [];\n\n  private _updateTimeout: any;\n\n  private _canvasWhiteboardServiceSubscriptions: Subscription[] = [];\n  private _resizeSubscription: Subscription;\n  private _registeredShapesSubscription: Subscription;\n\n  selectedShapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n  canvasWhiteboardShapePreviewOptions: CanvasWhiteboardShapeOptions;\n\n  constructor(private ngZone: NgZone,\n              private changeDetectorRef: ChangeDetectorRef,\n              private canvasWhiteboardService: CanvasWhiteboardService,\n              private canvasWhiteboardShapeService: CanvasWhiteboardShapeService) {\n    this._shapesMap = new Map<string, CanvasWhiteboardShape>();\n    this._incompleteShapesMap = new Map<string, CanvasWhiteboardShape>();\n    this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n  }\n\n  /**\n   * Initialize the canvas drawing context. If we have an aspect ratio set up, the canvas will resize\n   * according to the aspect ratio.\n   */\n  ngOnInit(): void {\n    this._initInputsFromOptions(this.options);\n    this._initCanvasEventListeners();\n    this._initCanvasServiceObservables();\n    this.context = this.canvas.nativeElement.getContext('2d');\n    this._incompleteShapesCanvasContext = this._incompleteShapesCanvas.nativeElement.getContext('2d');\n  }\n\n  /**\n   * If an image exists and it's url changes, we need to redraw the new image on the canvas.\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.options && !isEqual(changes.options.currentValue, changes.options.previousValue)) {\n      this._initInputsFromOptions(changes.options.currentValue);\n    }\n  }\n\n  /**\n   * Recalculate the width and height of the canvas after the view has been fully initialized\n   */\n  ngAfterViewInit(): void {\n    this._calculateCanvasWidthAndHeight();\n    this._redrawHistory();\n  }\n\n  /**\n   * This method reads the options which are helpful since they can be really long when specified in HTML\n   * This method is also called everytime the options object changes\n   * For security reasons we must check each item on its own since if we iterate the keys\n   * we may be injected with malicious values\n   *\n   * @param options\n   */\n  private _initInputsFromOptions(options: CanvasWhiteboardOptions): void {\n    if (options) {\n      if (!this._isNullOrUndefined(options.batchUpdateTimeoutDuration)) {\n        this.batchUpdateTimeoutDuration = options.batchUpdateTimeoutDuration;\n      }\n      if (!this._isNullOrUndefined(options.imageUrl)) {\n        this.imageUrl = options.imageUrl;\n      }\n      if (!this._isNullOrUndefined(options.aspectRatio)) {\n        this.aspectRatio = options.aspectRatio;\n      }\n      if (!this._isNullOrUndefined(options.drawButtonClass)) {\n        this.drawButtonClass = options.drawButtonClass;\n      }\n      if (!this._isNullOrUndefined(options.clearButtonClass)) {\n        this.clearButtonClass = options.clearButtonClass;\n      }\n      if (!this._isNullOrUndefined(options.undoButtonClass)) {\n        this.undoButtonClass = options.undoButtonClass;\n      }\n      if (!this._isNullOrUndefined(options.redoButtonClass)) {\n        this.redoButtonClass = options.redoButtonClass;\n      }\n      if (!this._isNullOrUndefined(options.saveDataButtonClass)) {\n        this.saveDataButtonClass = options.saveDataButtonClass;\n      }\n      if (!this._isNullOrUndefined(options.drawButtonText)) {\n        this.drawButtonText = options.drawButtonText;\n      }\n      if (!this._isNullOrUndefined(options.clearButtonText)) {\n        this.clearButtonText = options.clearButtonText;\n      }\n      if (!this._isNullOrUndefined(options.undoButtonText)) {\n        this.undoButtonText = options.undoButtonText;\n      }\n      if (!this._isNullOrUndefined(options.redoButtonText)) {\n        this.redoButtonText = options.redoButtonText;\n      }\n      if (!this._isNullOrUndefined(options.saveDataButtonText)) {\n        this.saveDataButtonText = options.saveDataButtonText;\n      }\n      if (!this._isNullOrUndefined(options.strokeColorPickerText)) {\n        this.strokeColorPickerText = options.strokeColorPickerText;\n      }\n      if (!this._isNullOrUndefined(options.fillColorPickerText)) {\n        this.fillColorPickerText = options.fillColorPickerText;\n      }\n      if (!this._isNullOrUndefined(options.drawButtonEnabled)) {\n        this.drawButtonEnabled = options.drawButtonEnabled;\n      }\n      if (!this._isNullOrUndefined(options.clearButtonEnabled)) {\n        this.clearButtonEnabled = options.clearButtonEnabled;\n      }\n      if (!this._isNullOrUndefined(options.undoButtonEnabled)) {\n        this.undoButtonEnabled = options.undoButtonEnabled;\n      }\n      if (!this._isNullOrUndefined(options.redoButtonEnabled)) {\n        this.redoButtonEnabled = options.redoButtonEnabled;\n      }\n      if (!this._isNullOrUndefined(options.saveDataButtonEnabled)) {\n        this.saveDataButtonEnabled = options.saveDataButtonEnabled;\n      }\n      if (!this._isNullOrUndefined(options.colorPickerEnabled)) {\n        this.colorPickerEnabled = options.colorPickerEnabled;\n      }\n      if (!this._isNullOrUndefined(options.strokeColorPickerEnabled)) {\n        this.strokeColorPickerEnabled = options.strokeColorPickerEnabled;\n      }\n      if (!this._isNullOrUndefined(options.fillColorPickerEnabled)) {\n        this.fillColorPickerEnabled = options.fillColorPickerEnabled;\n      }\n      if (!this._isNullOrUndefined(options.lineWidth)) {\n        this.lineWidth = options.lineWidth;\n      }\n      if (!this._isNullOrUndefined(options.strokeColor)) {\n        this.strokeColor = options.strokeColor;\n      }\n      if (!this._isNullOrUndefined(options.shouldDownloadDrawing)) {\n        this.shouldDownloadDrawing = options.shouldDownloadDrawing;\n      }\n      if (!this._isNullOrUndefined(options.startingColor)) {\n        this.startingColor = options.startingColor;\n      }\n      if (!this._isNullOrUndefined(options.scaleFactor)) {\n        this.scaleFactor = options.scaleFactor;\n      }\n      if (!this._isNullOrUndefined(options.drawingEnabled)) {\n        this.drawingEnabled = options.drawingEnabled;\n      }\n      if (!this._isNullOrUndefined(options.downloadedFileName)) {\n        this.downloadedFileName = options.downloadedFileName;\n      }\n      if (!this._isNullOrUndefined(options.lineJoin)) {\n        this.lineJoin = options.lineJoin;\n      }\n      if (!this._isNullOrUndefined(options.lineCap)) {\n        this.lineCap = options.lineCap;\n      }\n      if (!this._isNullOrUndefined(options.shapeSelectorEnabled)) {\n        this.shapeSelectorEnabled = options.shapeSelectorEnabled;\n      }\n      if (!this._isNullOrUndefined(options.showShapeSelector)) {\n        this.showShapeSelector = options.showShapeSelector;\n      }\n      if (!this._isNullOrUndefined(options.fillColor)) {\n        this.fillColor = options.fillColor;\n      }\n      if (!this._isNullOrUndefined(options.showStrokeColorPicker)) {\n        this.showStrokeColorPicker = options.showStrokeColorPicker;\n      }\n      if (!this._isNullOrUndefined(options.showFillColorPicker)) {\n        this.showFillColorPicker = options.showFillColorPicker;\n      }\n    }\n  }\n\n  private _isNullOrUndefined(property: any): boolean {\n    return property === null || property === undefined;\n  }\n\n  /**\n   * Init global window listeners like resize and keydown\n   */\n  private _initCanvasEventListeners(): void {\n    this.ngZone.runOutsideAngular(() => {\n      this._resizeSubscription = fromEvent(window, 'resize')\n        .pipe(\n          debounceTime(200),\n          distinctUntilChanged()\n        )\n        .subscribe(() => {\n          this.ngZone.run(() => {\n            this._redrawCanvasOnResize();\n          });\n        });\n    });\n\n    window.addEventListener('keydown', this._canvasKeyDown.bind(this), false);\n  }\n\n  /**\n   * Subscribes to new signals in the canvas whiteboard service and executes methods accordingly\n   * Because of circular publishing and subscribing, the canvas methods do not use the service when\n   * local actions are completed (Ex. clicking undo from the button inside this component)\n   */\n  private _initCanvasServiceObservables(): void {\n    this._canvasWhiteboardServiceSubscriptions.push(this.canvasWhiteboardService.canvasDrawSubject$\n      .subscribe(updates => this.drawUpdates(updates)));\n    this._canvasWhiteboardServiceSubscriptions.push(this.canvasWhiteboardService.canvasClearSubject$\n      .subscribe(() => this.clearCanvas()));\n    this._canvasWhiteboardServiceSubscriptions.push(this.canvasWhiteboardService.canvasUndoSubject$\n      .subscribe((updateUUD) => this._undoCanvas(updateUUD)));\n    this._canvasWhiteboardServiceSubscriptions.push(this.canvasWhiteboardService.canvasRedoSubject$\n      .subscribe((updateUUD) => this._redoCanvas(updateUUD)));\n\n    this._registeredShapesSubscription = this.canvasWhiteboardShapeService.registeredShapes$.subscribe((shapes) => {\n      if (!this.selectedShapeConstructor || !this.canvasWhiteboardShapeService.isRegisteredShape(this.selectedShapeConstructor)) {\n        this.selectedShapeConstructor = shapes[0];\n      }\n    });\n  }\n\n  /**\n   * Calculate the canvas width and height from it's parent container width and height (use aspect ratio if needed)\n   */\n  private _calculateCanvasWidthAndHeight(): void {\n    this.context.canvas.width = this.canvas.nativeElement.parentNode.clientWidth;\n    if (this.aspectRatio) {\n      this.context.canvas.height = this.canvas.nativeElement.parentNode.clientWidth * this.aspectRatio;\n    } else {\n      this.context.canvas.height = this.canvas.nativeElement.parentNode.clientHeight;\n    }\n\n    this._incompleteShapesCanvasContext.canvas.width = this.context.canvas.width;\n    this._incompleteShapesCanvasContext.canvas.height = this.context.canvas.height;\n  }\n\n  /**\n   * Load an image and draw it on the canvas (if an image exists)\n   * @param callbackFn A function that is called after the image loading is finished\n   * @return Emits a value when the image has been loaded.\n   */\n  private _loadImage(callbackFn?: any): void {\n    this._canDraw = false;\n\n    // If we already have the image there is no need to acquire it\n    if (this._imageElement) {\n      this._canDraw = true;\n      callbackFn && callbackFn();\n      return;\n    }\n\n    this._imageElement = new Image();\n    this._imageElement.addEventListener('load', () => {\n      this._canDraw = true;\n      callbackFn && callbackFn();\n      this.onImageLoaded.emit(true);\n    });\n    this._imageElement.src = this.imageUrl;\n  }\n\n  /**\n   * Sends a notification after clearing the canvas\n   * This method should only be called from the clear button in this component since it will emit an clear event\n   * If the client calls this method he may create a circular clear action which may cause danger.\n   */\n  clearCanvasLocal(): void {\n    this.clearCanvas();\n    this.onClear.emit(true);\n  }\n\n  /**\n   * Clears all content on the canvas.\n   */\n  clearCanvas(): void {\n    this._removeCanvasData();\n    this._redoStack = [];\n  }\n\n  /**\n   * This method resets the state of the canvas and redraws it.\n   * It calls a callback function after redrawing\n   * @param callbackFn\n   */\n  private _removeCanvasData(callbackFn?: any): void {\n    this._shapesMap = new Map<string, CanvasWhiteboardShape>();\n    this._clientDragging = false;\n    this._updateHistory = [];\n    this._undoStack = [];\n    this._redrawBackground(callbackFn);\n  }\n\n  /**\n   * Clears the canvas and redraws the image if the url exists.\n   * @param callbackFn A function that is called after the background is redrawn\n   * @return Emits a value when the clearing is finished\n   */\n  private _redrawBackground(callbackFn?: any): void {\n    if (this.context) {\n      if (this.imageUrl) {\n        this._loadImage(() => {\n          this.context.save();\n          this._drawImage(this.context, this._imageElement, 0, 0, this.context.canvas.width, this.context.canvas.height, 0.5, 0.5);\n          this.context.restore();\n          this._drawMissingUpdates();\n          callbackFn && callbackFn();\n        });\n      } else {\n        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        this._drawStartingColor();\n        callbackFn && callbackFn();\n      }\n    }\n  }\n\n  private _drawStartingColor(): void {\n    const previousFillStyle = this.context.fillStyle;\n    this.context.save();\n\n    this.context.fillStyle = this.startingColor;\n    this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n    this.context.fillStyle = previousFillStyle;\n\n    this.context.restore();\n  }\n\n\n  /**\n   * @deprecated Use getDrawingEnabled(): boolean\n   */\n  getShouldDraw(): boolean {\n    return this.getDrawingEnabled();\n  }\n\n  /**\n   * Returns a value of whether the user clicked the draw button on the canvas.\n   */\n  getDrawingEnabled(): boolean {\n    return this.drawingEnabled;\n  }\n\n  /**\n   * Toggles drawing on the canvas. It is called via the draw button on the canvas.\n   */\n  toggleDrawingEnabled(): void {\n    this.drawingEnabled = !this.drawingEnabled;\n  }\n\n  /**\n   * Set if drawing is enabled from the client using the canvas\n   * @param drawingEnabled\n   */\n  setDrawingEnabled(drawingEnabled: boolean): void {\n    this.drawingEnabled = drawingEnabled;\n  }\n\n  /**\n   * @deprecated Please use the changeStrokeColor(newStrokeColor: string): void method\n   */\n  changeColor(newStrokeColor: string): void {\n    this.changeStrokeColor(newStrokeColor);\n  }\n\n  /**\n   * Replaces the drawing color with a new color\n   * The format should be (\"#ffffff\" or \"rgb(r,g,b,a?)\")\n   * This method is public so that anyone can access the canvas and change the stroke color\n   *\n   * @param newStrokeColor The new stroke color\n   */\n  changeStrokeColor(newStrokeColor: string): void {\n    this.strokeColor = newStrokeColor;\n\n    this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Replaces the fill color with a new color\n   * The format should be (\"#ffffff\" or \"rgb(r,g,b,a?)\")\n   * This method is public so that anyone can access the canvas and change the fill color\n   *\n   * @param newFillColor The new fill color\n   */\n  changeFillColor(newFillColor: string): void {\n    this.fillColor = newFillColor;\n    this.canvasWhiteboardShapePreviewOptions = this.generateShapePreviewOptions();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * This method is invoked by the undo button on the canvas screen\n   * It calls the global undo method and emits a notification after undoing.\n   * This method should only be called from the undo button in this component since it will emit an undo event\n   * If the client calls this method he may create a circular undo action which may cause danger.\n   */\n  undoLocal(): void {\n    this.undo((updateUUID) => {\n      this._redoStack.push(updateUUID);\n      this.onUndo.emit(updateUUID);\n    });\n  }\n\n  /**\n   * This methods selects the last uuid prepares it for undoing (making the whole update sequence invisible)\n   * This method can be called if the canvas component is a ViewChild of some other component.\n   * This method will work even if the undo button has been disabled\n   */\n  undo(callbackFn?: (updateUUID: string) => void): void {\n    if (!this._undoStack.length) {\n      return;\n    }\n\n    const updateUUID = this._undoStack.pop();\n    this._undoCanvas(updateUUID);\n    callbackFn && callbackFn(updateUUID);\n  }\n\n  /**\n   * This method takes an UUID for an update, and redraws the canvas by making all updates with that uuid invisible\n   * @param updateUUID\n   */\n  private _undoCanvas(updateUUID: string): void {\n    if (this._shapesMap.has(updateUUID)) {\n      const shape = this._shapesMap.get(updateUUID);\n      shape.isVisible = false;\n      this.drawAllShapes();\n    }\n  }\n\n  /**\n   * This method is invoked by the redo button on the canvas screen\n   * It calls the global redo method and emits a notification after redoing\n   * This method should only be called from the redo button in this component since it will emit an redo event\n   * If the client calls this method he may create a circular redo action which may cause danger.\n   */\n  redoLocal(): void {\n    this.redo((updateUUID) => {\n      this._undoStack.push(updateUUID);\n      this.onRedo.emit(updateUUID);\n    });\n  }\n\n  /**\n   * This methods selects the last uuid prepares it for redoing (making the whole update sequence visible)\n   * This method can be called if the canvas component is a ViewChild of some other component.\n   * This method will work even if the redo button has been disabled\n   */\n  redo(callbackFn?: any): void {\n    if (!this._redoStack.length) {\n      return;\n    }\n\n    const updateUUID = this._redoStack.pop();\n    this._redoCanvas(updateUUID);\n    callbackFn && callbackFn(updateUUID);\n  }\n\n  /**\n   * This method takes an UUID for an update, and redraws the canvas by making all updates with that uuid visible\n   * @param updateUUID\n   */\n  private _redoCanvas(updateUUID: string): void {\n    if (this._shapesMap.has(updateUUID)) {\n      const shape = this._shapesMap.get(updateUUID);\n      shape.isVisible = true;\n\n      this.drawAllShapes();\n    }\n  }\n\n  /**\n   * Catches the Mouse and Touch events made on the canvas.\n   * If drawing is disabled (If an image exists but it's not loaded, or the user did not click Draw),\n   * this function does nothing.\n   *\n   * If a \"mousedown | touchstart\" event is triggered, dragging will be set to true and an CanvasWhiteboardUpdate object\n   * of type \"start\" will be drawn and then sent as an update to all receiving ends.\n   *\n   * If a \"mousemove | touchmove\" event is triggered and the client is dragging, an CanvasWhiteboardUpdate object\n   * of type \"drag\" will be drawn and then sent as an update to all receiving ends.\n   *\n   * If a \"mouseup, mouseout | touchend, touchcancel\" event is triggered, dragging will be set to false and\n   * an CanvasWhiteboardUpdate object of type \"stop\" will be drawn and then sent as an update to all receiving ends.\n   *\n   */\n  canvasUserEvents(event: any): void {\n    // Ignore all if we didn't click the _draw! button or the image did not load\n    if (!this.drawingEnabled || !this._canDraw) {\n      return;\n    }\n\n    // Ignore mouse move Events if we're not dragging\n    if (!this._clientDragging\n      && (event.type === 'mousemove'\n        || event.type === 'touchmove'\n        || event.type === 'mouseout'\n        || event.type === 'touchcancel'\n        || event.type === 'mouseup'\n        || event.type === 'touchend'\n        || event.type === 'mouseout')) {\n      return;\n    }\n\n    if (event.target == this._incompleteShapesCanvas.nativeElement || event.target == this.canvas.nativeElement) {\n      event.preventDefault();\n    }\n\n    let update: CanvasWhiteboardUpdate;\n    let updateType: number;\n    const eventPosition: CanvasWhiteboardPoint = this._getCanvasEventPosition(event);\n    update = new CanvasWhiteboardUpdate(eventPosition.x, eventPosition.y);\n\n    switch (event.type) {\n      case 'mousedown':\n      case 'touchstart':\n        this._clientDragging = true;\n        this._lastUUID = this._generateUUID();\n        updateType = CanvasWhiteboardUpdateType.START;\n        this._redoStack = [];\n\n        this._addCurrentShapeDataToAnUpdate(update);\n        break;\n      case 'mousemove':\n      case 'touchmove':\n        if (!this._clientDragging) {\n          return;\n        }\n        updateType = CanvasWhiteboardUpdateType.DRAG;\n        break;\n      case 'touchcancel':\n      case 'mouseup':\n      case 'touchend':\n      case 'mouseout':\n        this._clientDragging = false;\n        updateType = CanvasWhiteboardUpdateType.STOP;\n        this._undoStack.push(this._lastUUID);\n        break;\n    }\n\n    update.UUID = this._lastUUID;\n    update.type = updateType;\n\n    this._draw(update);\n    this._prepareToSendUpdate(update);\n  }\n\n  /**\n   * Get the coordinates (x,y) from a given event\n   * If it is a touch event, get the touch positions\n   * If we released the touch, the position will be placed in the changedTouches object\n   * If it is not a touch event, use the original mouse event received\n   * @param eventData\n   */\n  private _getCanvasEventPosition(eventData: any): CanvasWhiteboardPoint {\n    const canvasBoundingRect = this.context.canvas.getBoundingClientRect();\n\n    let hasTouches = (eventData.touches && eventData.touches.length) ? eventData.touches[0] : null;\n    if (!hasTouches) {\n      hasTouches = (eventData.changedTouches && eventData.changedTouches.length) ? eventData.changedTouches[0] : null;\n    }\n\n    const event = hasTouches ? hasTouches : eventData;\n\n    const scaleWidth = canvasBoundingRect.width / this.context.canvas.width;\n    const scaleHeight = canvasBoundingRect.height / this.context.canvas.height;\n\n    let xPosition = (event.clientX - canvasBoundingRect.left);\n    let yPosition = (event.clientY - canvasBoundingRect.top);\n\n    xPosition /= this.scaleFactor ? this.scaleFactor : scaleWidth;\n    yPosition /= this.scaleFactor ? this.scaleFactor : scaleHeight;\n\n    return new CanvasWhiteboardPoint(xPosition / this.context.canvas.width, yPosition / this.context.canvas.height);\n  }\n\n  /**\n   * The update coordinates on the canvas are mapped so that all receiving ends\n   * can reverse the mapping and get the same position as the one that\n   * was drawn on this update.\n   *\n   * @param update The CanvasWhiteboardUpdate object.\n   */\n  private _prepareToSendUpdate(update: CanvasWhiteboardUpdate): void {\n    this._prepareUpdateForBatchDispatch(update);\n  }\n\n\n  /**\n   * Catches the Key Up events made on the canvas.\n   * If the ctrlKey or commandKey(macOS) was held and the keyCode is 90 (z), an undo action will be performed\n   * If the ctrlKey or commandKey(macOS) was held and the keyCode is 89 (y), a redo action will be performed\n   * If the ctrlKey or commandKey(macOS) was held and the keyCode is 83 (s) or 115(S), a save action will be performed\n   *\n   * @param event The event that occurred.\n   */\n  private _canvasKeyDown(event: any): void {\n    if (event.ctrlKey || event.metaKey) {\n      if (event.keyCode === 90 && this.undoButtonEnabled) {\n        event.preventDefault();\n        this.undo();\n      }\n      if (event.keyCode === 89 && this.redoButtonEnabled) {\n        event.preventDefault();\n        this.redo();\n      }\n      if (event.keyCode === 83 || event.keyCode === 115) {\n        event.preventDefault();\n        this.saveLocal();\n      }\n    }\n  }\n\n  /**\n   * On window resize, recalculate the canvas dimensions and redraw the history\n   */\n  private _redrawCanvasOnResize(): void {\n    this._calculateCanvasWidthAndHeight();\n    this._redrawHistory();\n  }\n\n  /**\n   * Redraw the saved history after resetting the canvas state\n   */\n  private _redrawHistory(): void {\n    const updatesToDraw = [].concat(this._updateHistory);\n\n    this._removeCanvasData(() => {\n      updatesToDraw.forEach((update: CanvasWhiteboardUpdate) => {\n        this._draw(update);\n      });\n    });\n  }\n\n  /**\n   * Draws a CanvasWhiteboardUpdate object on the canvas.\n   * The coordinates are first reverse mapped so that they can be drawn in the proper place. The update\n   * is afterwards added to the undoStack so that it can be\n   *\n   * If the CanvasWhiteboardUpdate Type is \"start\", a new \"selectedShape\" is created.\n   * If the CanvasWhiteboardUpdate Type is \"drag\", the shape is taken from the shapesMap and then it's updated.\n   * Afterwards the context is used to draw the shape on the canvas.\n   * This function saves the last X and Y coordinates that were drawn.\n   *\n   * @param update The update object.\n   */\n  private _draw(update: CanvasWhiteboardUpdate): void {\n    this._updateHistory.push(update);\n\n    // map the canvas coordinates to our canvas size since they are scaled.\n    update = Object.assign(new CanvasWhiteboardUpdate(),\n      update,\n      {\n        x: update.x * this.context.canvas.width,\n        y: update.y * this.context.canvas.height\n      });\n\n    if (update.type === CanvasWhiteboardUpdateType.START) {\n      const updateShapeConstructor = this.canvasWhiteboardShapeService.getShapeConstructorFromShapeName(update.selectedShape);\n      const shape = new updateShapeConstructor(\n        new CanvasWhiteboardPoint(update.x, update.y),\n        Object.assign(new CanvasWhiteboardShapeOptions(), update.selectedShapeOptions)\n      );\n      this._incompleteShapesMap.set(update.UUID, shape);\n      this._drawIncompleteShapes();\n    } else if (update.type === CanvasWhiteboardUpdateType.DRAG) {\n      const shape = this._incompleteShapesMap.get(update.UUID);\n      shape && shape.onUpdateReceived(update);\n      this._drawIncompleteShapes();\n    } else if (CanvasWhiteboardUpdateType.STOP) {\n      const shape = this._incompleteShapesMap.get(update.UUID);\n      shape && shape.onStopReceived(update);\n\n      this._shapesMap.set(update.UUID, shape);\n      this._incompleteShapesMap.delete(update.UUID);\n      this._swapCompletedShapeToActualCanvas(shape);\n    }\n  }\n\n  private _drawIncompleteShapes(): void {\n    this._resetIncompleteShapeCanvas();\n    this._incompleteShapesMap.forEach((shape) => {\n      if (shape.isVisible) {\n        shape.draw(this._incompleteShapesCanvasContext);\n      }\n    });\n  }\n\n  private _swapCompletedShapeToActualCanvas(shape: CanvasWhiteboardShape): void {\n    this._drawIncompleteShapes();\n    if (shape.isVisible) {\n      shape.draw(this.context);\n    }\n  }\n\n  private _resetIncompleteShapeCanvas(): void {\n    this._incompleteShapesCanvasContext.clearRect(0, 0, this._incompleteShapesCanvasContext.canvas.width,\n      this._incompleteShapesCanvasContext.canvas.height);\n    this._incompleteShapesCanvasContext.fillStyle = 'transparent';\n    this._incompleteShapesCanvasContext.fillRect(0, 0, this._incompleteShapesCanvasContext.canvas.width,\n      this._incompleteShapesCanvasContext.canvas.height);\n  }\n\n  /**\n   * Delete everything from the screen, redraw the background, and then redraw all the shapes from the shapesMap\n   */\n  drawAllShapes(): void {\n    this._redrawBackground(() => {\n      this._shapesMap.forEach((shape: CanvasWhiteboardShape) => {\n        if (shape.isVisible) {\n          shape.draw(this.context);\n        }\n      });\n    });\n  }\n\n  private _addCurrentShapeDataToAnUpdate(update: CanvasWhiteboardUpdate): void {\n    if (!update.selectedShape) {\n      update.selectedShape = (new this.selectedShapeConstructor).getShapeName();\n    }\n\n    if (!update.selectedShapeOptions) {\n      // Make a deep copy since we don't want some Shape implementation to change something by accident\n      update.selectedShapeOptions = Object.assign(new CanvasWhiteboardShapeOptions(),\n        this.generateShapePreviewOptions(), {lineWidth: this.lineWidth});\n    }\n  }\n\n  generateShapePreviewOptions(): CanvasWhiteboardShapeOptions {\n    return Object.assign(new CanvasWhiteboardShapeOptions(),\n      {\n        shouldFillShape: !!this.fillColor,\n        fillStyle: this.fillColor,\n        strokeStyle: this.strokeColor,\n        lineWidth: 2,\n        lineJoin: this.lineJoin,\n        lineCap: this.lineCap\n      });\n  }\n\n  /**\n   * Sends the update to all receiving ends as an Event emit. This is done as a batch operation (meaning\n   * multiple updates are sent at the same time). If this method is called, after 100 ms all updates\n   * that were made at that time will be packed up together and sent to the receiver.\n   *\n   * @param update The update object.\n   * @return Emits an Array of Updates when the batch.\n   */\n  private _prepareUpdateForBatchDispatch(update: CanvasWhiteboardUpdate): void {\n    this._batchUpdates.push(cloneDeep(update));\n    if (!this._updateTimeout) {\n      this._updateTimeout = setTimeout(() => {\n        this.onBatchUpdate.emit(this._batchUpdates);\n        this._batchUpdates = [];\n        this._updateTimeout = null;\n      }, this.batchUpdateTimeoutDuration);\n    }\n  }\n\n  /**\n   * Draws an Array of Updates on the canvas.\n   *\n   * @param updates The array with Updates.\n   */\n  drawUpdates(updates: CanvasWhiteboardUpdate[]): void {\n    if (this._canDraw) {\n      this._drawMissingUpdates();\n      updates.forEach((update: CanvasWhiteboardUpdate) => {\n        this._draw(update);\n      });\n    } else {\n      this._updatesNotDrawn = this._updatesNotDrawn.concat(updates);\n    }\n  }\n\n  /**\n   * Draw any missing updates that were received before the image was loaded\n   */\n  private _drawMissingUpdates(): void {\n    if (this._updatesNotDrawn.length > 0) {\n      const updatesToDraw = this._updatesNotDrawn;\n      this._updatesNotDrawn = [];\n\n      updatesToDraw.forEach((update: CanvasWhiteboardUpdate) => {\n        this._draw(update);\n      });\n    }\n  }\n\n  /**\n   * Draws an image on the canvas\n   *\n   * @param context The context used to draw the image on the canvas.\n   * @param image The image to draw.\n   * @param x The X coordinate for the starting draw position.\n   * @param y The Y coordinate for the starting draw position.\n   * @param width The width of the image that will be drawn.\n   * @param height The height of the image that will be drawn.\n   * @param offsetX The offsetX if the image size is larger than the canvas (aspect Ratio)\n   * @param offsetY The offsetY if the image size is larger than the canvas (aspect Ratio)\n   */\n  private _drawImage(context: any, image: any, x: number, y: number, width: number, height: number, offsetX: number, offsetY: number): void {\n    if (arguments.length === 2) {\n      x = y = 0;\n      width = context.canvas.width;\n      height = context.canvas.height;\n    }\n\n    offsetX = typeof offsetX === 'number' ? offsetX : 0.5;\n    offsetY = typeof offsetY === 'number' ? offsetY : 0.5;\n\n    if (offsetX < 0) {\n      offsetX = 0;\n    }\n    if (offsetY < 0) {\n      offsetY = 0;\n    }\n    if (offsetX > 1) {\n      offsetX = 1;\n    }\n    if (offsetY > 1) {\n      offsetY = 1;\n    }\n\n    const imageWidth = image.width;\n    const imageHeight = image.height;\n    const radius = Math.min(width / imageWidth, height / imageHeight);\n    let newWidth = imageWidth * radius;\n    let newHeight = imageHeight * radius;\n    let finalDrawX: any;\n    let finalDrawY: any;\n    let finalDrawWidth: any;\n    let finalDrawHeight: any;\n    let aspectRatio = 1;\n\n    // decide which gap to fill\n    if (newWidth < width) {\n      aspectRatio = width / newWidth;\n    }\n    if (Math.abs(aspectRatio - 1) < 1e-14 && newHeight < height) {\n      aspectRatio = height / newHeight;\n    }\n    newWidth *= aspectRatio;\n    newHeight *= aspectRatio;\n\n    // calculate source rectangle\n    finalDrawWidth = imageWidth / (newWidth / width);\n    finalDrawHeight = imageHeight / (newHeight / height);\n\n    finalDrawX = (imageWidth - finalDrawWidth) * offsetX;\n    finalDrawY = (imageHeight - finalDrawHeight) * offsetY;\n\n    // make sure the source rectangle is valid\n    if (finalDrawX < 0) {\n      finalDrawX = 0;\n    }\n    if (finalDrawY < 0) {\n      finalDrawY = 0;\n    }\n    if (finalDrawWidth > imageWidth) {\n      finalDrawWidth = imageWidth;\n    }\n    if (finalDrawHeight > imageHeight) {\n      finalDrawHeight = imageHeight;\n    }\n\n    // fill the image in destination rectangle\n    context.drawImage(image, finalDrawX, finalDrawY, finalDrawWidth, finalDrawHeight, x, y, width, height);\n  }\n\n  /**\n   * The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG).\n   * The returned image is in a resolution of 96 dpi.\n   * If the height or width of the canvas is 0, the string \"data:,\" is returned.\n   * If the requested type is not image/png, but the returned value starts with data:image/png, then the requested type is not supported.\n   * Chrome also supports the image/webp type.\n   *\n   * @param returnedDataType A DOMString indicating the image format. The default format type is image/png.\n   * @param returnedDataQuality A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp.\n   If this argument is anything else, the default value for image quality is used. The default value is 0.92. Other arguments are ignored.\n   */\n  generateCanvasDataUrl(returnedDataType: string = 'image/png', returnedDataQuality: number = 1): string {\n    return this.context.canvas.toDataURL(returnedDataType, returnedDataQuality);\n  }\n\n  /**\n   * Generate a Blob object representing the content drawn on the canvas.\n   * This file may be cached on the disk or stored in memory at the discretion of the user agent.\n   * If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.\n   * The third argument is used with image/jpeg images to specify the quality of the output.\n   *\n   * @param callbackFn The function that should be executed when the blob is created. Should accept a parameter Blob (for the result).\n   * @param returnedDataType A DOMString indicating the image format. The default type is image/png.\n   * @param returnedDataQuality A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp.\n   If this argument is anything else, the default value for image quality is used. Other arguments are ignored.\n   */\n  generateCanvasBlob(callbackFn: any, returnedDataType: string = 'image/png', returnedDataQuality: number = 1): void {\n    let toBlobMethod: Function;\n\n    if (typeof this.context.canvas.toBlob !== 'undefined') {\n      toBlobMethod = this.context.canvas.toBlob.bind(this.context.canvas);\n    } else if (typeof (this.context.canvas as any).msToBlob !== 'undefined') {\n      // For IE\n      toBlobMethod = (callback) => {\n        callback && callback((this.context.canvas as any).msToBlob());\n      };\n    }\n\n    toBlobMethod && toBlobMethod((blob: Blob) => {\n      callbackFn && callbackFn(blob, returnedDataType);\n    }, returnedDataType, returnedDataQuality);\n  }\n\n  /**\n   * Generate a canvas image representation and download it locally\n   * The name of the image is canvas_drawing_ + the current local Date and Time the image was created\n   * Methods for standalone creation of the images in this method are left here for backwards compatibility\n   *\n   * @param returnedDataType A DOMString indicating the image format. The default type is image/png.\n   * @param downloadData? The created string or Blob (IE).\n   * @param customFileName? The name of the file that should be downloaded\n   */\n  downloadCanvasImage(returnedDataType: string = 'image/png', downloadData?: string | Blob, customFileName?: string): void {\n    if (window.navigator.msSaveOrOpenBlob === undefined) {\n      const downloadLink = document.createElement('a');\n      downloadLink.setAttribute('href', downloadData ? downloadData as string : this.generateCanvasDataUrl(returnedDataType));\n\n      const fileName = customFileName ? customFileName\n        : (this.downloadedFileName ? this.downloadedFileName : 'canvas_drawing_' + new Date().valueOf());\n\n      downloadLink.setAttribute('download', fileName + this._generateDataTypeString(returnedDataType));\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    } else {\n      // IE-specific code\n      if (downloadData) {\n        this._saveCanvasBlob(downloadData as Blob, returnedDataType);\n      } else {\n        this.generateCanvasBlob(this._saveCanvasBlob.bind(this), returnedDataType);\n      }\n    }\n  }\n\n  /**\n   * Save the canvas blob (IE) locally\n   * @param blob\n   * @param returnedDataType\n   */\n  private _saveCanvasBlob(blob: Blob, returnedDataType: string = 'image/png'): void {\n    window.navigator.msSaveOrOpenBlob(blob, 'canvas_drawing_' +\n      new Date().valueOf() + this._generateDataTypeString(returnedDataType));\n  }\n\n  /**\n   * This method generates a canvas url string or a canvas blob with the presented data type\n   * A callback function is then invoked since the blob creation must be done via a callback\n   *\n   * @param callback\n   * @param returnedDataType\n   * @param returnedDataQuality\n   */\n  generateCanvasData(callback: any, returnedDataType: string = 'image/png', returnedDataQuality: number = 1): void {\n    if (window.navigator.msSaveOrOpenBlob === undefined) {\n      callback && callback(this.generateCanvasDataUrl(returnedDataType, returnedDataQuality));\n    } else {\n      this.generateCanvasBlob(callback, returnedDataType, returnedDataQuality);\n    }\n  }\n\n  /**\n   * Local method to invoke saving of the canvas data when clicked on the canvas Save button\n   * This method will emit the generated data with the specified Event Emitter\n   *\n   * @param returnedDataType\n   */\n  saveLocal(returnedDataType: string = 'image/png'): void {\n    this.generateCanvasData((generatedData: string | Blob) => {\n      this.onSave.emit(generatedData);\n\n      if (this.shouldDownloadDrawing) {\n        this.downloadCanvasImage(returnedDataType, generatedData);\n      }\n    });\n  }\n\n  private _generateDataTypeString(returnedDataType: string): string {\n    if (returnedDataType) {\n      return '.' + returnedDataType.split('/')[1];\n    }\n\n    return '';\n  }\n\n  /**\n   * Toggles the color picker window, delegating the showColorPicker Input to the ColorPickerComponent.\n   * If no value is supplied (null/undefined) the current value will be negated and used.\n   * @param value\n   */\n  toggleStrokeColorPicker(value: boolean): void {\n    this.showStrokeColorPicker = !this._isNullOrUndefined(value) ? value : !this.showStrokeColorPicker;\n  }\n\n  /**\n   * Toggles the color picker window, delegating the showColorPicker Input to the ColorPickerComponent.\n   * If no value is supplied (null/undefined) the current value will be negated and used.\n   * @param value\n   */\n  toggleFillColorPicker(value: boolean): void {\n    this.showFillColorPicker = !this._isNullOrUndefined(value) ? value : !this.showFillColorPicker;\n  }\n\n  /**\n   * Toggles the shape selector window, delegating the showShapeSelector Input to the CanvasWhiteboardShapeSelectorComponent.\n   * If no value is supplied (null/undefined) the current value will be negated and used.\n   * @param value\n   */\n  toggleShapeSelector(value: boolean): void {\n    this.showShapeSelector = !this._isNullOrUndefined(value) ? value : !this.showShapeSelector;\n  }\n\n  selectShape(newShapeBlueprint: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): void {\n    this.selectedShapeConstructor = newShapeBlueprint;\n  }\n\n  /**\n   * Returns a deep copy of the current drawing history for the canvas.\n   * The deep copy is returned because we don't want anyone to mutate the current history\n   */\n  getDrawingHistory(): CanvasWhiteboardUpdate[] {\n    return cloneDeep(this._updateHistory);\n  }\n\n  /**\n   * Unsubscribe from a given subscription if it is active\n   * @param subscription\n   */\n  private _unsubscribe(subscription: Subscription): void {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n\n  private _generateUUID(): string {\n    return this._random4() + this._random4() + '-' + this._random4() + '-' + this._random4() + '-' +\n      this._random4() + '-' + this._random4() + this._random4() + this._random4();\n  }\n\n  private _random4(): string {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n\n  /**\n   * Unsubscribe from the service observables\n   */\n  ngOnDestroy(): void {\n    this._unsubscribe(this._resizeSubscription);\n    this._unsubscribe(this._registeredShapesSubscription);\n    this._canvasWhiteboardServiceSubscriptions.forEach(subscription => this._unsubscribe(subscription));\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\nimport { CanvasWhiteboardShapeService, INewCanvasWhiteboardShape } from './canvas-whiteboard-shape.service';\nimport { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'canvas-whiteboard-shape-selector',\n  host: {\n    '(document:mousedown)': 'closeOnExternalClick($event)',\n    '(document:touchstart)': 'closeOnExternalClick($event)'\n  },\n  template: `\n    <div *ngIf=\"!showShapeSelector\" (click)=\"toggleShapeSelector($event)\"\n         class=\"canvas-whiteboard-shape-selector-selected-preview\">\n      <canvas-whiteboard-shape-preview [shapeConstructor]=\"selectedShapeConstructor\"\n                                       [shapeOptions]=\"shapeOptions\"></canvas-whiteboard-shape-preview>\n    </div>\n    <div class=\"canvas-whiteboard-shape-selector-wrapper\" *ngIf=\"showShapeSelector\">\n      <canvas-whiteboard-shape-preview *ngFor=\"let shapeConstructor of registeredShapes$ | async\"\n                                       [shapeConstructor]=\"shapeConstructor\"\n                                       [shapeOptions]=\"shapeOptions\"\n                                       (click)=\"selectShape(shapeConstructor)\"></canvas-whiteboard-shape-preview>\n    </div>\n  `,\n  styles: [`\n    .canvas-whiteboard-shape-selector-selected-preview {\n      vertical-align: bottom;\n      display: inline-block;\n    }\n\n    .canvas-whiteboard-shape-selector-wrapper {\n      display: block;\n      padding: 4px;\n      border: 1px solid #afafaf;\n    }\n\n    @media (min-width: 401px) {\n      .canvas-whiteboard-shape-selector-wrapper {\n      }\n    }\n  `]\n})\nexport class CanvasWhiteboardShapeSelectorComponent {\n  @Input() readonly showShapeSelector: boolean = false;\n  @Input() readonly selectedShapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n  @Input() readonly shapeOptions: CanvasWhiteboardShapeOptions;\n\n  @Output() onToggleShapeSelector = new EventEmitter<boolean>();\n  @Output() onShapeSelected = new EventEmitter<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>();\n\n  registeredShapes$: Observable<INewCanvasWhiteboardShape<CanvasWhiteboardShape>[]>;\n\n  constructor(private elementRef: ElementRef,\n              private canvasWhiteboardShapeService: CanvasWhiteboardShapeService) {\n    this.registeredShapes$ = this.canvasWhiteboardShapeService.registeredShapes$;\n  }\n\n  selectShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): void {\n    this.onShapeSelected.emit(shape);\n    this.toggleShapeSelector(null);\n  }\n\n  closeOnExternalClick(event): void {\n    if (!this.elementRef.nativeElement.contains(event.target) && this.showShapeSelector) {\n      this.onToggleShapeSelector.emit(false);\n    }\n  }\n\n  toggleShapeSelector(event: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    this.onToggleShapeSelector.emit(!this.showShapeSelector);\n  }\n}\n","import {\n  Component,\n  Output,\n  EventEmitter, OnInit, ViewChild, ElementRef, Input\n} from '@angular/core';\n\n@Component({\n  selector: 'canvas-whiteboard-colorpicker',\n  host: {\n    '(document:mousedown)': 'closeOnExternalClick($event)',\n    '(document:touchstart)': 'closeOnExternalClick($event)'\n  },\n  template: `\n    <div [hidden]=\"showColorPicker\" class=\"canvas-whiteboard-colorpicker-input\"\n         (click)=\"toggleColorPicker($event)\">\n      <div class=\"selected-color-type-wrapper\">{{previewText}}</div>\n      <div class=\"selected-color-preview\" [style.background]=\"selectedColor\"></div>\n    </div>\n    <div [hidden]=\"!showColorPicker\" class=\"canvas-whiteboard-colorpicker-wrapper\">\n      <div (click)=\"selectColor('transparent')\" class=\"transparent-color\">Transparent</div>\n      <canvas #canvaswhiteboardcolorpicker class=\"canvas-whiteboard-colorpicker\" width=\"284\" height=\"155\"\n              (click)=\"selectColor(determineColorFromCanvas($event))\"></canvas>\n    </div>\n  `,\n  styles: [`\n    .selected-color-preview {\n      width: 100%;\n      height: 20%;\n      position: absolute;\n      bottom: 0;\n      left: 0;\n    }\n\n    .selected-color-type-wrapper {\n      display: inline-block;\n      height: 100%;\n      width: 100%;\n      text-align: center;\n      font-size: 14px;\n      color: #000;\n    }\n\n    .transparent-color {\n      font-size: 14px;\n    }\n\n    .canvas-whiteboard-colorpicker-wrapper {\n      border: 1px solid #afafaf;\n      color: #000;\n    }\n\n    @media (min-width: 401px) {\n      .canvas-whiteboard-colorpicker-wrapper {\n        position: absolute;\n      }\n    }\n\n    .canvas-whiteboard-colorpicker-input {\n      display: inline-block;\n      position: relative;\n      width: 44px;\n      height: 44px;\n      margin: 5px;\n      cursor: pointer;\n      color: #000;\n    }\n  `]\n})\nexport class CanvasWhiteboardColorPickerComponent implements OnInit {\n\n  @Input() previewText: string;\n  @Input() readonly selectedColor: string = 'rgba(0,0,0,1)';\n  @ViewChild('canvaswhiteboardcolorpicker', {static: true}) canvas: ElementRef;\n\n  @Input() readonly showColorPicker: boolean = false;\n  private _context: CanvasRenderingContext2D;\n\n  @Output() onToggleColorPicker = new EventEmitter<boolean>();\n  @Output() onColorSelected = new EventEmitter<string>();\n  @Output() onSecondaryColorSelected = new EventEmitter<string>();\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  /**\n   * Initialize the canvas drawing context. If we have an aspect ratio set up, the canvas will resize\n   * according to the aspect ratio.\n   */\n  ngOnInit(): void {\n    this._context = this.canvas.nativeElement.getContext('2d');\n    this.createColorPalette();\n  }\n\n  createColorPalette(): void {\n    let gradient = this._context.createLinearGradient(0, 0, this._context.canvas.width, 0);\n    gradient.addColorStop(0, 'rgb(255, 0, 0)');\n    gradient.addColorStop(0.15, 'rgb(255, 0, 255)');\n    gradient.addColorStop(0.33, 'rgb(0, 0, 255)');\n    gradient.addColorStop(0.49, 'rgb(0, 255, 255)');\n    gradient.addColorStop(0.67, 'rgb(0, 255, 0)');\n    gradient.addColorStop(0.84, 'rgb(255, 255, 0)');\n    gradient.addColorStop(1, 'rgb(255, 0, 0)');\n    this._context.fillStyle = gradient;\n    this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n\n    gradient = this._context.createLinearGradient(0, 0, 0, this._context.canvas.height);\n    gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n    gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0)');\n    gradient.addColorStop(0.5, 'rgba(0, 0, 0, 0)');\n    gradient.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    this._context.fillStyle = gradient;\n    this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n  }\n\n  closeOnExternalClick(event): void {\n    if (!this.elementRef.nativeElement.contains(event.target) && this.showColorPicker) {\n      this.onToggleColorPicker.emit(false);\n    }\n  }\n\n  toggleColorPicker(event: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    this.onToggleColorPicker.emit(!this.showColorPicker);\n  }\n\n  determineColorFromCanvas(event: any): string {\n    const canvasRect = this._context.canvas.getBoundingClientRect();\n    const imageData = this._context.getImageData(event.clientX - canvasRect.left,\n      event.clientY - canvasRect.top, 1, 1);\n\n    return `rgba(${imageData.data[0]}, ${imageData.data[1]}, ${imageData.data[2]}, ${imageData.data[3]})`;\n  }\n\n  selectColor(color: string): void {\n    this.onColorSelected.emit(color);\n    this.toggleColorPicker(null);\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  ViewChild,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { INewCanvasWhiteboardShape } from './canvas-whiteboard-shape.service';\nimport { CanvasWhiteboardShape } from './canvas-whiteboard-shape';\nimport { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';\nimport { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';\n\n@Component({\n  selector: 'canvas-whiteboard-shape-preview',\n  template: `\n    <canvas #canvasWhiteboardShapePreview width=\"50px\" height=\"50px\"\n            class=\"canvas-whiteboard-shape-preview-canvas\"></canvas>\n  `,\n  styles: [`\n    .canvas-whiteboard-shape-preview-canvas {\n      cursor: pointer;\n    }\n  `]\n})\nexport class CanvasWhiteboardShapePreviewComponent implements AfterViewInit, OnChanges {\n  @Input() readonly shapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;\n  @Input() readonly shapeOptions: CanvasWhiteboardShapeOptions;\n\n  @ViewChild('canvasWhiteboardShapePreview') canvas: ElementRef;\n\n  ngAfterViewInit(): void {\n    this.drawShapePreview();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.shapeConstructor || changes.shapeOptions) {\n      this.drawShapePreview();\n    }\n  }\n\n  drawShapePreview(): void {\n    if (!this.canvas) {\n      return;\n    }\n\n    const context: CanvasRenderingContext2D = this.canvas.nativeElement.getContext('2d');\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n\n    const concreteShape = new this.shapeConstructor(\n      new CanvasWhiteboardPoint(0, 0),\n      Object.assign(new CanvasWhiteboardShapeOptions(), this.shapeOptions)\n    );\n\n    concreteShape.drawPreview(context);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CanvasWhiteboardComponent } from './canvas-whiteboard.component';\nimport { CommonModule } from '@angular/common';\nimport { CanvasWhiteboardColorPickerComponent } from './canvas-whiteboard-colorpicker.component';\nimport { CanvasWhiteboardShapeSelectorComponent } from './shapes/canvas-whiteboard-shape-selector.component';\nimport { CanvasWhiteboardShapePreviewComponent } from './shapes/canvas-whiteboard-shape-preview.component';\nimport { CanvasWhiteboardService } from './canvas-whiteboard.service';\nimport { CanvasWhiteboardShapeService } from './shapes/canvas-whiteboard-shape.service';\n\n@NgModule({\n  declarations: [\n    CanvasWhiteboardComponent,\n    CanvasWhiteboardColorPickerComponent,\n    CanvasWhiteboardShapeSelectorComponent,\n    CanvasWhiteboardShapePreviewComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    CanvasWhiteboardService,\n    CanvasWhiteboardShapeService\n  ],\n  exports: [CanvasWhiteboardComponent]\n})\nexport class CanvasWhiteboardModule {\n\n}\n","/*\n * Public API Surface of ng2-canvas-whiteboard\n */\nexport { CanvasWhiteboardComponent } from './lib/canvas-whiteboard.component';\nexport { CanvasWhiteboardUpdate } from './lib/canvas-whiteboard-update.model';\nexport { CanvasWhiteboardService } from './lib/canvas-whiteboard.service';\nexport { CanvasWhiteboardOptions } from './lib/canvas-whiteboard-options';\nexport { CanvasWhiteboardPoint } from './lib/canvas-whiteboard-point.model';\nexport { CanvasWhiteboardShape } from './lib/shapes/canvas-whiteboard-shape';\nexport { CanvasWhiteboardShapeOptions } from './lib/shapes/canvas-whiteboard-shape-options';\nexport { CanvasWhiteboardShapeService } from './lib/shapes/canvas-whiteboard-shape.service';\nexport { FreeHandShape } from './lib/shapes/free-hand-shape';\nexport { CircleShape } from './lib/shapes/circle-shape';\nexport { LineShape } from './lib/shapes/line-shape';\nexport { RectangleShape } from './lib/shapes/rectangle-shape';\nexport { SmileyShape } from './lib/shapes/smiley-shape';\nexport { StarShape } from './lib/shapes/star-shape';\nexport { CanvasWhiteboardShapeSelectorComponent } from './lib/shapes/canvas-whiteboard-shape-selector.component';\nexport { CanvasWhiteboardColorPickerComponent } from './lib/canvas-whiteboard-colorpicker.component';\nexport { CanvasWhiteboardShapePreviewComponent } from './lib/shapes/canvas-whiteboard-shape-preview.component';\nexport { CanvasWhiteboardModule } from './lib/ng2-canvas-whiteboard.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DEFAULT_STYLES as ɵa} from './lib/template';"]}