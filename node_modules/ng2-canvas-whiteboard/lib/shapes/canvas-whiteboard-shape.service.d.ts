import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';
import { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';
import { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare type INewCanvasWhiteboardShape<T extends CanvasWhiteboardShape> = new (positionPoint?: CanvasWhiteboardPoint, options?: CanvasWhiteboardShapeOptions, ...args: any[]) => T;
export declare class CanvasWhiteboardShapeService {
    private registeredShapesSubject;
    registeredShapes$: Observable<Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>>;
    constructor();
    getShapeConstructorFromShapeName(shapeName: string): INewCanvasWhiteboardShape<CanvasWhiteboardShape>;
    getCurrentRegisteredShapes(): Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>;
    isRegisteredShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): boolean;
    registerShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): void;
    registerShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>): void;
    unregisterShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): void;
    unregisterShapes(shapes: Array<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CanvasWhiteboardShapeService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CanvasWhiteboardShapeService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJjYW52YXMtd2hpdGVib2FyZC1zaGFwZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRTaGFwZSB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUnO1xuaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtb3B0aW9ucyc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQgfSBmcm9tICcuLi9jYW52YXMtd2hpdGVib2FyZC1wb2ludC5tb2RlbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8VCBleHRlbmRzIENhbnZhc1doaXRlYm9hcmRTaGFwZT4gPSBuZXcgKHBvc2l0aW9uUG9pbnQ/OiBDYW52YXNXaGl0ZWJvYXJkUG9pbnQsIG9wdGlvbnM/OiBDYW52YXNXaGl0ZWJvYXJkU2hhcGVPcHRpb25zLCAuLi5hcmdzOiBhbnlbXSkgPT4gVDtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhbnZhc1doaXRlYm9hcmRTaGFwZVNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVnaXN0ZXJlZFNoYXBlc1N1YmplY3Q7XG4gICAgcmVnaXN0ZXJlZFNoYXBlcyQ6IE9ic2VydmFibGU8QXJyYXk8SU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+Pj47XG4gICAgY29uc3RydWN0b3IoKTtcbiAgICBnZXRTaGFwZUNvbnN0cnVjdG9yRnJvbVNoYXBlTmFtZShzaGFwZU5hbWU6IHN0cmluZyk6IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPjtcbiAgICBnZXRDdXJyZW50UmVnaXN0ZXJlZFNoYXBlcygpOiBBcnJheTxJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlPENhbnZhc1doaXRlYm9hcmRTaGFwZT4+O1xuICAgIGlzUmVnaXN0ZXJlZFNoYXBlKHNoYXBlOiBJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlPENhbnZhc1doaXRlYm9hcmRTaGFwZT4pOiBib29sZWFuO1xuICAgIHJlZ2lzdGVyU2hhcGUoc2hhcGU6IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJTaGFwZXMoc2hhcGVzOiBBcnJheTxJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlPENhbnZhc1doaXRlYm9hcmRTaGFwZT4+KTogdm9pZDtcbiAgICB1bnJlZ2lzdGVyU2hhcGUoc2hhcGU6IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPik6IHZvaWQ7XG4gICAgdW5yZWdpc3RlclNoYXBlcyhzaGFwZXM6IEFycmF5PElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPj4pOiB2b2lkO1xufVxuIl19