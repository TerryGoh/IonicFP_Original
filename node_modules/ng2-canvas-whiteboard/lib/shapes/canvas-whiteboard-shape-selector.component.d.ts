import { ElementRef, EventEmitter } from '@angular/core';
import { CanvasWhiteboardShapeService, INewCanvasWhiteboardShape } from './canvas-whiteboard-shape.service';
import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';
import { CanvasWhiteboardShapeOptions } from './canvas-whiteboard-shape-options';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class CanvasWhiteboardShapeSelectorComponent {
    private elementRef;
    private canvasWhiteboardShapeService;
    readonly showShapeSelector: boolean;
    readonly selectedShapeConstructor: INewCanvasWhiteboardShape<CanvasWhiteboardShape>;
    readonly shapeOptions: CanvasWhiteboardShapeOptions;
    onToggleShapeSelector: EventEmitter<boolean>;
    onShapeSelected: EventEmitter<INewCanvasWhiteboardShape<CanvasWhiteboardShape>>;
    registeredShapes$: Observable<INewCanvasWhiteboardShape<CanvasWhiteboardShape>[]>;
    constructor(elementRef: ElementRef, canvasWhiteboardShapeService: CanvasWhiteboardShapeService);
    selectShape(shape: INewCanvasWhiteboardShape<CanvasWhiteboardShape>): void;
    closeOnExternalClick(event: any): void;
    toggleShapeSelector(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CanvasWhiteboardShapeSelectorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CanvasWhiteboardShapeSelectorComponent, "canvas-whiteboard-shape-selector", never, { "showShapeSelector": "showShapeSelector"; "selectedShapeConstructor": "selectedShapeConstructor"; "shapeOptions": "shapeOptions"; }, { "onToggleShapeSelector": "onToggleShapeSelector"; "onShapeSelected": "onShapeSelected"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtc2VsZWN0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhbnZhcy13aGl0ZWJvYXJkLXNoYXBlLXNlbGVjdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVTZXJ2aWNlLCBJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZS5zZXJ2aWNlJztcbmltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRTaGFwZSB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUnO1xuaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtb3B0aW9ucyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVTZWxlY3RvckNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgY2FudmFzV2hpdGVib2FyZFNoYXBlU2VydmljZTtcbiAgICByZWFkb25seSBzaG93U2hhcGVTZWxlY3RvcjogYm9vbGVhbjtcbiAgICByZWFkb25seSBzZWxlY3RlZFNoYXBlQ29uc3RydWN0b3I6IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPjtcbiAgICByZWFkb25seSBzaGFwZU9wdGlvbnM6IENhbnZhc1doaXRlYm9hcmRTaGFwZU9wdGlvbnM7XG4gICAgb25Ub2dnbGVTaGFwZVNlbGVjdG9yOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgb25TaGFwZVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8SU5ld0NhbnZhc1doaXRlYm9hcmRTaGFwZTxDYW52YXNXaGl0ZWJvYXJkU2hhcGU+PjtcbiAgICByZWdpc3RlcmVkU2hhcGVzJDogT2JzZXJ2YWJsZTxJTmV3Q2FudmFzV2hpdGVib2FyZFNoYXBlPENhbnZhc1doaXRlYm9hcmRTaGFwZT5bXT47XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgY2FudmFzV2hpdGVib2FyZFNoYXBlU2VydmljZTogQ2FudmFzV2hpdGVib2FyZFNoYXBlU2VydmljZSk7XG4gICAgc2VsZWN0U2hhcGUoc2hhcGU6IElOZXdDYW52YXNXaGl0ZWJvYXJkU2hhcGU8Q2FudmFzV2hpdGVib2FyZFNoYXBlPik6IHZvaWQ7XG4gICAgY2xvc2VPbkV4dGVybmFsQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgdG9nZ2xlU2hhcGVTZWxlY3RvcihldmVudDogRXZlbnQpOiB2b2lkO1xufVxuIl19