import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface DatePickerOptions {
    /**
     * The mode of the date picker
     * Values: date | time | datetime
     */
    mode: string;
    /**
     * Selected date
     */
    date: Date | string | number;
    /**
     * Minimum date
     * Default: empty String
     */
    minDate?: Date | string | number;
    /**
     * Maximum date
     * Default: empty String
     */
    maxDate?: Date | string | number;
    /**
     * Label for the dialog title. If empty, uses android default (Set date/Set time).
     * Default: empty String
     */
    titleText?: string;
    /**
     * Label of BUTTON_POSITIVE (done button) on Android
     */
    okText?: string;
    /**
     * Label of BUTTON_NEGATIVE (cancel button). If empty, uses android.R.string.cancel.
     */
    cancelText?: string;
    /**
     * Label of today button. If empty, doesn't show the option to select current date.
     */
    todayText?: string;
    /**
     * Label of now button. If empty, doesn't show the option to select current time.
     */
    nowText?: string;
    /**
     * Shows time dialog in 24 hours format.
     */
    is24Hour?: boolean;
    /**
     * Choose the Android theme for the picker. You can use the DatePicker.ANDROID_THEMES property.
     * Values: 1: THEME_TRADITIONAL | 2: THEME_HOLO_DARK | 3: THEME_HOLO_LIGHT | 4: THEME_DEVICE_DEFAULT_DARK | 5: THEME_DEVICE_DEFAULT_LIGHT
     */
    androidTheme?: number;
    /**
     * Shows or hide dates earlier then selected date.
     */
    allowOldDates?: boolean;
    /**
     * Shows or hide dates after selected date.
     */
    allowFutureDates?: boolean;
    /**
     * Label of done button.
     */
    doneButtonLabel?: string;
    /**
     * Hex color of done button.
     */
    doneButtonColor?: string;
    /**
     * Label of cancel button.
     */
    cancelButtonLabel?: string;
    /**
     * Hex color of cancel button.
     */
    cancelButtonColor?: string;
    /**
     * X position of date picker. The position is absolute to the root view of the application.
     */
    x?: number;
    /**
     * Y position of date picker. The position is absolute to the root view of the application.
     */
    y?: number;
    /**
     * Interval between options in the minute section of the date picker.
     */
    minuteInterval?: number;
    /**
     * Force the UIPopoverArrowDirection enum. The value any will revert to default UIPopoverArrowDirectionAny and let the app choose the proper direction itself.
     */
    popoverArrowDirection?: string;
    /**
     * Force locale for datePicker.
     */
    locale?: string;
}
/**
 * @name Date Picker
 * @description
 * The DatePicker plugin allows the user to fetch date or time using native dialogs.
 *
 * @usage
 * ```typescript
 * import { DatePicker } from '@ionic-native/date-picker/ngx';
 *
 * constructor(private datePicker: DatePicker) { }
 *
 *
 * ...
 *
 *
 * this.datePicker.show({
 *   date: new Date(),
 *   mode: 'date',
 *   androidTheme: this.datePicker.ANDROID_THEMES.THEME_HOLO_DARK
 * }).then(
 *   date => console.log('Got date: ', date),
 *   err => console.log('Error occurred while getting date: ', err)
 * );
 * ```
 * @interfaces
 * DatePickerOptions
 */
export declare class DatePicker extends IonicNativePlugin {
    /**
     * @hidden
     */
    ANDROID_THEMES: {
        THEME_TRADITIONAL: number;
        THEME_HOLO_DARK: number;
        THEME_HOLO_LIGHT: number;
        THEME_DEVICE_DEFAULT_DARK: number;
        THEME_DEVICE_DEFAULT_LIGHT: number;
    };
    /**
     * Shows the date and/or time picker dialog(s)
     * @param {DatePickerOptions} options Options for the date picker.
     * @returns {Promise<Date>} Returns a promise that resolves with the picked date and/or time, or rejects with an error.
     */
    show(options: DatePickerOptions): Promise<Date>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePicker, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DatePicker>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5leHBvcnQgaW50ZXJmYWNlIERhdGVQaWNrZXJPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbW9kZSBvZiB0aGUgZGF0ZSBwaWNrZXJcbiAgICAgKiBWYWx1ZXM6IGRhdGUgfCB0aW1lIHwgZGF0ZXRpbWVcbiAgICAgKi9cbiAgICBtb2RlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2VsZWN0ZWQgZGF0ZVxuICAgICAqL1xuICAgIGRhdGU6IERhdGUgfCBzdHJpbmcgfCBudW1iZXI7XG4gICAgLyoqXG4gICAgICogTWluaW11bSBkYXRlXG4gICAgICogRGVmYXVsdDogZW1wdHkgU3RyaW5nXG4gICAgICovXG4gICAgbWluRGF0ZT86IERhdGUgfCBzdHJpbmcgfCBudW1iZXI7XG4gICAgLyoqXG4gICAgICogTWF4aW11bSBkYXRlXG4gICAgICogRGVmYXVsdDogZW1wdHkgU3RyaW5nXG4gICAgICovXG4gICAgbWF4RGF0ZT86IERhdGUgfCBzdHJpbmcgfCBudW1iZXI7XG4gICAgLyoqXG4gICAgICogTGFiZWwgZm9yIHRoZSBkaWFsb2cgdGl0bGUuIElmIGVtcHR5LCB1c2VzIGFuZHJvaWQgZGVmYXVsdCAoU2V0IGRhdGUvU2V0IHRpbWUpLlxuICAgICAqIERlZmF1bHQ6IGVtcHR5IFN0cmluZ1xuICAgICAqL1xuICAgIHRpdGxlVGV4dD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBMYWJlbCBvZiBCVVRUT05fUE9TSVRJVkUgKGRvbmUgYnV0dG9uKSBvbiBBbmRyb2lkXG4gICAgICovXG4gICAgb2tUZXh0Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIExhYmVsIG9mIEJVVFRPTl9ORUdBVElWRSAoY2FuY2VsIGJ1dHRvbikuIElmIGVtcHR5LCB1c2VzIGFuZHJvaWQuUi5zdHJpbmcuY2FuY2VsLlxuICAgICAqL1xuICAgIGNhbmNlbFRleHQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTGFiZWwgb2YgdG9kYXkgYnV0dG9uLiBJZiBlbXB0eSwgZG9lc24ndCBzaG93IHRoZSBvcHRpb24gdG8gc2VsZWN0IGN1cnJlbnQgZGF0ZS5cbiAgICAgKi9cbiAgICB0b2RheVRleHQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTGFiZWwgb2Ygbm93IGJ1dHRvbi4gSWYgZW1wdHksIGRvZXNuJ3Qgc2hvdyB0aGUgb3B0aW9uIHRvIHNlbGVjdCBjdXJyZW50IHRpbWUuXG4gICAgICovXG4gICAgbm93VGV4dD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTaG93cyB0aW1lIGRpYWxvZyBpbiAyNCBob3VycyBmb3JtYXQuXG4gICAgICovXG4gICAgaXMyNEhvdXI/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENob29zZSB0aGUgQW5kcm9pZCB0aGVtZSBmb3IgdGhlIHBpY2tlci4gWW91IGNhbiB1c2UgdGhlIERhdGVQaWNrZXIuQU5EUk9JRF9USEVNRVMgcHJvcGVydHkuXG4gICAgICogVmFsdWVzOiAxOiBUSEVNRV9UUkFESVRJT05BTCB8IDI6IFRIRU1FX0hPTE9fREFSSyB8IDM6IFRIRU1FX0hPTE9fTElHSFQgfCA0OiBUSEVNRV9ERVZJQ0VfREVGQVVMVF9EQVJLIHwgNTogVEhFTUVfREVWSUNFX0RFRkFVTFRfTElHSFRcbiAgICAgKi9cbiAgICBhbmRyb2lkVGhlbWU/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2hvd3Mgb3IgaGlkZSBkYXRlcyBlYXJsaWVyIHRoZW4gc2VsZWN0ZWQgZGF0ZS5cbiAgICAgKi9cbiAgICBhbGxvd09sZERhdGVzPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTaG93cyBvciBoaWRlIGRhdGVzIGFmdGVyIHNlbGVjdGVkIGRhdGUuXG4gICAgICovXG4gICAgYWxsb3dGdXR1cmVEYXRlcz86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTGFiZWwgb2YgZG9uZSBidXR0b24uXG4gICAgICovXG4gICAgZG9uZUJ1dHRvbkxhYmVsPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEhleCBjb2xvciBvZiBkb25lIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBkb25lQnV0dG9uQ29sb3I/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTGFiZWwgb2YgY2FuY2VsIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBjYW5jZWxCdXR0b25MYWJlbD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBIZXggY29sb3Igb2YgY2FuY2VsIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBjYW5jZWxCdXR0b25Db2xvcj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBYIHBvc2l0aW9uIG9mIGRhdGUgcGlja2VyLiBUaGUgcG9zaXRpb24gaXMgYWJzb2x1dGUgdG8gdGhlIHJvb3QgdmlldyBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAgICovXG4gICAgeD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBZIHBvc2l0aW9uIG9mIGRhdGUgcGlja2VyLiBUaGUgcG9zaXRpb24gaXMgYWJzb2x1dGUgdG8gdGhlIHJvb3QgdmlldyBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAgICovXG4gICAgeT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJbnRlcnZhbCBiZXR3ZWVuIG9wdGlvbnMgaW4gdGhlIG1pbnV0ZSBzZWN0aW9uIG9mIHRoZSBkYXRlIHBpY2tlci5cbiAgICAgKi9cbiAgICBtaW51dGVJbnRlcnZhbD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGb3JjZSB0aGUgVUlQb3BvdmVyQXJyb3dEaXJlY3Rpb24gZW51bS4gVGhlIHZhbHVlIGFueSB3aWxsIHJldmVydCB0byBkZWZhdWx0IFVJUG9wb3ZlckFycm93RGlyZWN0aW9uQW55IGFuZCBsZXQgdGhlIGFwcCBjaG9vc2UgdGhlIHByb3BlciBkaXJlY3Rpb24gaXRzZWxmLlxuICAgICAqL1xuICAgIHBvcG92ZXJBcnJvd0RpcmVjdGlvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGb3JjZSBsb2NhbGUgZm9yIGRhdGVQaWNrZXIuXG4gICAgICovXG4gICAgbG9jYWxlPzogc3RyaW5nO1xufVxuLyoqXG4gKiBAbmFtZSBEYXRlIFBpY2tlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgRGF0ZVBpY2tlciBwbHVnaW4gYWxsb3dzIHRoZSB1c2VyIHRvIGZldGNoIGRhdGUgb3IgdGltZSB1c2luZyBuYXRpdmUgZGlhbG9ncy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERhdGVQaWNrZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2RhdGUtcGlja2VyL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlUGlja2VyOiBEYXRlUGlja2VyKSB7IH1cbiAqXG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuZGF0ZVBpY2tlci5zaG93KHtcbiAqICAgZGF0ZTogbmV3IERhdGUoKSxcbiAqICAgbW9kZTogJ2RhdGUnLFxuICogICBhbmRyb2lkVGhlbWU6IHRoaXMuZGF0ZVBpY2tlci5BTkRST0lEX1RIRU1FUy5USEVNRV9IT0xPX0RBUktcbiAqIH0pLnRoZW4oXG4gKiAgIGRhdGUgPT4gY29uc29sZS5sb2coJ0dvdCBkYXRlOiAnLCBkYXRlKSxcbiAqICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cnJlZCB3aGlsZSBnZXR0aW5nIGRhdGU6ICcsIGVycilcbiAqICk7XG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBEYXRlUGlja2VyT3B0aW9uc1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlUGlja2VyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBBTkRST0lEX1RIRU1FUzoge1xuICAgICAgICBUSEVNRV9UUkFESVRJT05BTDogbnVtYmVyO1xuICAgICAgICBUSEVNRV9IT0xPX0RBUks6IG51bWJlcjtcbiAgICAgICAgVEhFTUVfSE9MT19MSUdIVDogbnVtYmVyO1xuICAgICAgICBUSEVNRV9ERVZJQ0VfREVGQVVMVF9EQVJLOiBudW1iZXI7XG4gICAgICAgIFRIRU1FX0RFVklDRV9ERUZBVUxUX0xJR0hUOiBudW1iZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgZGF0ZSBhbmQvb3IgdGltZSBwaWNrZXIgZGlhbG9nKHMpXG4gICAgICogQHBhcmFtIHtEYXRlUGlja2VyT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgZGF0ZSBwaWNrZXIuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RGF0ZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcGlja2VkIGRhdGUgYW5kL29yIHRpbWUsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBzaG93KG9wdGlvbnM6IERhdGVQaWNrZXJPcHRpb25zKTogUHJvbWlzZTxEYXRlPjtcbn1cbiJdfQ==