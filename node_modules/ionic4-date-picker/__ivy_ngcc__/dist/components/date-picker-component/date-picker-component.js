import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@ionic/angular';

function DatePickerComponent_ion_item_1_span_6_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵelementStart(1, "ion-button", 8);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_item_1_span_6_Template_ion_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.previous(); });
    ɵngcc0.ɵɵelement(2, "ion-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "ion-button", 8);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_item_1_span_6_Template_ion_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.next(); });
    ɵngcc0.ɵɵelement(4, "ion-icon", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.hasPrevious());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.hasNext());
} }
function DatePickerComponent_ion_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-item", 0);
    ɵngcc0.ɵɵelement(1, "ion-icon", 3);
    ɵngcc0.ɵɵelementStart(2, "ion-button", 4);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_item_1_Template_ion_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.showMonthView(); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "ion-button", 5);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_item_1_Template_ion_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.showYearView(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, DatePickerComponent_ion_item_1_span_6_Template, 5, 2, "span", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r0.backgroundStyle);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.monthLabels[ctx_r0.monthSelected - 1], " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r0.hasYearSelection());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.yearSelected, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasPrevious() || ctx_r0.hasNext());
} }
function DatePickerComponent_ion_grid_2_ion_col_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-col", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var daylabel_r13 = ctx.$implicit;
    var ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r11.dayLabelsStyle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", daylabel_r13, " ");
} }
function DatePickerComponent_ion_grid_2_ion_row_3_ion_col_1_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-col", 15);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_grid_2_ion_row_3_ion_col_1_Template_ion_col_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); var day_r16 = ctx.$implicit; var ctx_r17 = ɵngcc0.ɵɵnextContext(3); return ctx_r17.selectDay(day_r16); });
    ɵngcc0.ɵɵelementStart(1, "span", 0);
    ɵngcc0.ɵɵelementStart(2, "span", 0);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var day_r16 = ctx.$implicit;
    var ctx_r15 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r15.getDayStyle(day_r16));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", !day_r16.inCalendar && ctx_r15.notInCalendarStyle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r15.isValidDay(day_r16) && !ctx_r15.isOneOfTheValidDates(day_r16) && ctx_r15.invalidDateStyle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r15.isValidDay(day_r16) ? day_r16.dayOfMonth : "\u00A0\u00A0");
} }
function DatePickerComponent_ion_grid_2_ion_row_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-row");
    ɵngcc0.ɵɵtemplate(1, DatePickerComponent_ion_grid_2_ion_row_3_ion_col_1_Template, 4, 4, "ion-col", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var week_r14 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", week_r14);
} }
function DatePickerComponent_ion_grid_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-grid");
    ɵngcc0.ɵɵelementStart(1, "ion-row");
    ɵngcc0.ɵɵtemplate(2, DatePickerComponent_ion_grid_2_ion_col_2_Template, 2, 2, "ion-col", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, DatePickerComponent_ion_grid_2_ion_row_3_Template, 2, 1, "ion-row", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.dayLabels);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.weeks);
} }
function DatePickerComponent_ion_grid_3_ion_col_6_Template(rf, ctx) { if (rf & 1) {
    var _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-col", 21);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_grid_3_ion_col_6_Template_ion_col_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r23); var i_r21 = ctx.index; var ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.selectMonth(i_r21 + 1); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var monthLabel_r20 = ctx.$implicit;
    var i_r21 = ctx.index;
    var ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r19.getMonthStyle(i_r21));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("invalidMonth", !ctx_r19.isValidMonth(i_r21));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(monthLabel_r20);
} }
function DatePickerComponent_ion_grid_3_Template(rf, ctx) { if (rf & 1) {
    var _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-grid");
    ɵngcc0.ɵɵelementStart(1, "ion-row", 16);
    ɵngcc0.ɵɵelementStart(2, "ion-col", 17);
    ɵngcc0.ɵɵelementStart(3, "ion-button", 18);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_grid_3_Template_ion_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r25); var ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.resetView(); });
    ɵngcc0.ɵɵelement(4, "ion-icon", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "ion-row");
    ɵngcc0.ɵɵtemplate(6, DatePickerComponent_ion_grid_3_ion_col_6_Template, 3, 4, "ion-col", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.monthLabels);
} }
function DatePickerComponent_ion_grid_4_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "ion-button", 8);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_grid_4_div_3_Template_ion_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r29); var ctx_r28 = ɵngcc0.ɵɵnextContext(2); return ctx_r28.showPreviousYears(); });
    ɵngcc0.ɵɵelement(2, "ion-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "ion-button", 24);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "ion-button", 8);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_grid_4_div_3_Template_ion_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r29); var ctx_r30 = ɵngcc0.ɵɵnextContext(2); return ctx_r30.showNextYears(); });
    ɵngcc0.ɵɵelement(6, "ion-icon", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r26 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r26.hasPreviousYears());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ctx_r26.startYear, " to ", ctx_r26.endYear, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r26.hasNextYears());
} }
function DatePickerComponent_ion_grid_4_ion_col_8_Template(rf, ctx) { if (rf & 1) {
    var _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-col", 21);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_grid_4_ion_col_8_Template_ion_col_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r33); var year_r31 = ctx.$implicit; var ctx_r32 = ɵngcc0.ɵɵnextContext(2); return ctx_r32.selectYear(year_r31); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var year_r31 = ctx.$implicit;
    var ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r27.getYearStyle(year_r31));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", year_r31, " ");
} }
function DatePickerComponent_ion_grid_4_Template(rf, ctx) { if (rf & 1) {
    var _r35 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-grid");
    ɵngcc0.ɵɵelementStart(1, "ion-row");
    ɵngcc0.ɵɵelementStart(2, "ion-col", 22);
    ɵngcc0.ɵɵtemplate(3, DatePickerComponent_ion_grid_4_div_3_Template, 7, 5, "div", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "ion-col", 23);
    ɵngcc0.ɵɵelementStart(5, "ion-button", 18);
    ɵngcc0.ɵɵlistener("click", function DatePickerComponent_ion_grid_4_Template_ion_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r35); var ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.resetView(); });
    ɵngcc0.ɵɵelement(6, "ion-icon", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "ion-row");
    ɵngcc0.ɵɵtemplate(8, DatePickerComponent_ion_grid_4_ion_col_8_Template, 2, 2, "ion-col", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.hasPreviousYears() || ctx_r3.hasNextYears());
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.years);
} }
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Calendar, Day } from 'dayspan';
import * as moment from 'moment';
var HTML_CODE = "\n<div  [ngStyle]=\"backgroundStyle\">\n    <ion-item *ngIf=\"showView === 'calendar'\" [ngStyle]=\"backgroundStyle\">\n        <ion-icon name=\"calendar\" slot=\"start\">\n        </ion-icon>\n        <ion-button fill=\"clear\" (click)=\"showMonthView()\" class=\"calendar-button\">\n            {{monthLabels[monthSelected-1]}}\n        </ion-button>\n        <ion-button fill=\"clear\" [disabled]=\"!hasYearSelection()\" (click)=\"showYearView()\" class=\"calendar-button\">\n            {{yearSelected}}\n        </ion-button>\n\n        <span slot=\"end\" *ngIf=\"hasPrevious() || hasNext()\">\n            <ion-button  fill=\"clear\" [disabled]=\"!hasPrevious()\" (click)=\"previous()\">\n                <ion-icon slot=\"icon-only\" name=\"ios-arrow-back\"></ion-icon>\n            </ion-button>\n            <ion-button fill=\"clear\" [disabled]=\"!hasNext()\" (click)=\"next()\">\n                <ion-icon slot=\"icon-only\" name=\"ios-arrow-forward\"></ion-icon>\n            </ion-button>\n        </span>\n    </ion-item>\n\n    <ion-grid *ngIf=\"showView === 'calendar'\">\n        <ion-row>\n            <ion-col *ngFor=\"let daylabel of dayLabels\" text-center [ngStyle]=\"dayLabelsStyle\">\n                {{daylabel}}\n            </ion-col>\n        </ion-row>\n        <ion-row *ngFor=\"let week of weeks\">\n            <ion-col *ngFor=\"let day of week\" (click)=\"selectDay(day)\" [ngStyle]=\"getDayStyle(day)\" text-center>\n                <span [ngStyle]=\"!day.inCalendar && notInCalendarStyle\">\n                   <span [ngStyle]=\"isValidDay(day) && !isOneOfTheValidDates(day) && invalidDateStyle\">{{isValidDay(day) ? day.dayOfMonth : '&nbsp;&nbsp;'}}</span>\n                </span>\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n\n    <ion-grid *ngIf=\"showView === 'month'\">\n        <ion-row justify-content-end>\n            <ion-col text-end>\n                <ion-button fill=\"clear\" (click)=\"resetView()\">\n                    <ion-icon slot=\"icon-only\" name=\"close\"></ion-icon>\n                </ion-button>\n            </ion-col>\n        </ion-row>\n        <ion-row>\n            <ion-col *ngFor=\"let monthLabel of monthLabels; let i = index\" [ngStyle]=\"getMonthStyle(i)\" size=\"3\" (click)=\"selectMonth(i+1)\" text-center>\n                <span [class.invalidMonth]=\"!isValidMonth(i)\">{{monthLabel}}</span>\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n\n    <ion-grid *ngIf=\"showView === 'year'\">\n        <ion-row>\n            <ion-col size=\"10\" text-center>\n                    <div *ngIf=\"hasPreviousYears() || hasNextYears()\">\n                        <ion-button fill=\"clear\" [disabled]=\"!hasPreviousYears()\"  (click)=\"showPreviousYears()\">\n                            <ion-icon slot=\"icon-only\" name=\"ios-arrow-back\"></ion-icon>\n                        </ion-button>\n                        <ion-button fill=\"clear\" [disabled]=\"true\" class=\"year-range\">\n                            {{startYear}} to {{endYear}}\n                        </ion-button>\n                    \n                        <ion-button fill=\"clear\" [disabled]=\"!hasNextYears()\" (click)=\"showNextYears()\">\n                            <ion-icon slot=\"icon-only\" name=\"ios-arrow-forward\"></ion-icon>\n                        </ion-button>\n                    </div>\n            </ion-col>\n            <ion-col size=\"2\" text-center>\n                <ion-button fill=\"clear\" (click)=\"resetView()\">\n                    <ion-icon slot=\"icon-only\" name=\"close\"></ion-icon>\n                </ion-button>\n            </ion-col>\n        </ion-row> \n        <ion-row>\n            <ion-col *ngFor=\"let year of years\" [ngStyle]=\"getYearStyle(year)\" size=\"3\" (click)=\"selectYear(year)\" text-center>\n                {{year}}\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n</div>\n";
var CSS_STYLE = "\n  .item {\n      .item-inner {\n        border-bottom: none !important;\n      }\n    }\n\n  ion-icon {\n    font-size: 25px;\n  }\n\n  .year-range {\n    font-size: 15px;\n    font-weight: 550;\n    &.button[disabled] {\n      opacity: 1;\n      color: gray !important;\n    }\n  }\n\n  .calendar-button {\n    text-decoration: underline;\n    padding-right: 2px !important;\n    padding-left: 2px !important;\n  }\n\n  .invalidMonth {\n    color: #8b8b8b\n  }\n";
var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent() {
        this.monthLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        this.dayLabels = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        this.validDates = [];
        this.dateStyles = {};
        this.backgroundStyle = { 'background-color': '#ffffff' };
        this.notInCalendarStyle = { 'color': '#8b8b8b' };
        this.dayLabelsStyle = { 'font-weight': 500, 'font-size': '14px' };
        this.monthLabelsStyle = { 'font-size': '15px' };
        this.yearLabelsStyle = { 'font-size': '15px' };
        this.itemSelectedStyle = { 'background': '#488aff', 'color': '#f4f4f4 !important' };
        this.invalidDateStyle = { 'text-decoration': 'line-through', 'color': 'red' };
        this.todaysItemStyle = { 'color': '#32db64' };
        this.onSelect = new EventEmitter();
        this.showView = 'calendar';
        this.yearSelected = new Date().getFullYear();
        this.monthSelected = new Date().getMonth() + 1;
        this.currentYear = new Date().getFullYear();
        this.currentMonth = new Date().getMonth() + 1;
        this.currentDay = new Date().getDate();
        //End of styles
    }
    DatePickerComponent.prototype.ngOnInit = function () {
        this.initOptions();
        this.createCalendarWeeks();
    };
    DatePickerComponent.prototype.initOptions = function () {
        if (this.date && this.fromDate && this.date < this.fromDate) {
            throw new Error('Invalid date input. date must be same or greater than fromDate');
        }
        if (this.date && this.toDate && this.toDate < this.date) {
            throw new Error('Invalid date input. date must be same or lesser than toDate');
        }
        if (this.toDate && this.fromDate && this.fromDate > this.toDate) {
            throw new Error('Invalid date input. from date must be lesser than or equal to toDate');
        }
        this.yearSelected = this.date ? this.date.getFullYear() : this.toDate ? this.toDate.getFullYear() : new Date().getFullYear();
        this.monthSelected = this.date ? this.date.getMonth() + 1 : this.toDate ? this.toDate.getMonth() + 1 : new Date().getMonth() + 1;
        this.dayHighlighted = this.date ? Day.fromDate(this.date) : this.toDate ? Day.fromDate(this.toDate) : Day.today();
        if (this.date) {
            this.daySelected = this.dayHighlighted;
        }
    };
    DatePickerComponent.prototype.createCalendarWeeks = function () {
        this.weeks = this.generateCalendarWeeks(Day.fromMoment(moment(this.monthSelected + '-01-' + this.yearSelected, 'MM-DD-YYYY')));
    };
    DatePickerComponent.prototype.hasPrevious = function () {
        if (!this.fromDate) {
            return true;
        }
        var previousMonth;
        var previousYear;
        if (this.monthSelected === 1) {
            previousMonth = 11;
            previousYear = this.yearSelected - 1;
        }
        else {
            previousMonth = this.monthSelected;
            previousYear = this.yearSelected;
        }
        // The last day of previous month should be greatar than or equal to fromDate
        return new Date(previousYear, previousMonth, 0) >= this.fromDate;
    };
    DatePickerComponent.prototype.hasNext = function () {
        if (!this.toDate) {
            return true;
        }
        var nextMonth;
        var nextYear;
        if (this.monthSelected === 12) {
            nextMonth = 0;
            nextYear = this.yearSelected + 1;
        }
        else {
            nextMonth = this.monthSelected;
            nextYear = this.yearSelected;
        }
        // The first day of next month should be less than or equal to toDate
        return new Date(nextYear, nextMonth, 1) <= this.toDate;
    };
    DatePickerComponent.prototype.previous = function () {
        if (this.monthSelected === 1) {
            this.monthSelected = 12;
            this.yearSelected--;
        }
        else {
            this.monthSelected--;
        }
        this.createCalendarWeeks();
    };
    DatePickerComponent.prototype.next = function () {
        if (this.monthSelected === 12) {
            this.monthSelected = 1;
            this.yearSelected++;
        }
        else {
            this.monthSelected++;
        }
        this.createCalendarWeeks();
    };
    DatePickerComponent.prototype.confirmDay = function (day) {
        this.onSelect.emit(day.toDate());
    };
    DatePickerComponent.prototype.selectDay = function (day) {
        var _this = this;
        if (!this.isValidDay(day) || !this.isOneOfTheValidDates(day)) {
            return;
        }
        this.daySelected = day;
        setTimeout(function () {
            _this.confirmDay(day);
        }, 200);
    };
    DatePickerComponent.prototype.showMonthView = function () {
        this.showView = 'month';
        "";
    };
    DatePickerComponent.prototype.hasYearSelection = function () {
        if (!this.toDate || !this.fromDate) {
            return true;
        }
        return this.toDate.getFullYear() !== this.fromDate.getFullYear();
    };
    DatePickerComponent.prototype.showYearView = function () {
        this.showView = 'year';
        var startYear = this.yearSelected - 10;
        if (startYear % 10 !== 0) {
            startYear = startYear - (startYear % 10);
        }
        var endYear = startYear + 19;
        this.startYear = startYear;
        this.endYear = endYear;
        this.generateYears();
    };
    DatePickerComponent.prototype.generateYears = function () {
        if (this.fromDate && this.startYear < this.fromDate.getFullYear()) {
            this.startYear = this.fromDate.getFullYear();
        }
        if (this.toDate && this.endYear > this.toDate.getFullYear()) {
            this.endYear = this.toDate.getFullYear();
        }
        this.years = [];
        for (var i = this.startYear; i <= this.endYear; i++) {
            this.years.push(i);
        }
    };
    DatePickerComponent.prototype.showPreviousYears = function () {
        this.endYear = this.startYear - 1;
        this.startYear = this.endYear - 19;
        this.generateYears();
    };
    DatePickerComponent.prototype.showNextYears = function () {
        this.startYear = this.endYear + 1;
        this.endYear = this.startYear + 19;
        this.generateYears();
    };
    DatePickerComponent.prototype.hasPreviousYears = function () {
        if (!this.fromDate) {
            return true;
        }
        return this.startYear > this.fromDate.getFullYear();
    };
    DatePickerComponent.prototype.hasNextYears = function () {
        if (!this.toDate) {
            return true;
        }
        return this.endYear < this.toDate.getFullYear();
    };
    DatePickerComponent.prototype.selectMonth = function (month) {
        var _this = this;
        if (!this.isValidMonth(month - 1)) {
            return;
        }
        this.monthSelected = month;
        this.createCalendarWeeks();
        setTimeout(function () {
            _this.showView = 'calendar';
        }, 200);
    };
    DatePickerComponent.prototype.selectYear = function (year) {
        var _this = this;
        this.yearSelected = year;
        this.createCalendarWeeks();
        setTimeout(function () {
            _this.showView = 'calendar';
        }, 200);
    };
    DatePickerComponent.prototype.resetView = function () {
        this.showView = 'calendar';
    };
    DatePickerComponent.prototype.isToday = function (day) {
        return this.yearSelected === this.currentYear && this.monthSelected === this.currentMonth && this.currentDay === day;
    };
    DatePickerComponent.prototype.generateCalendarWeeks = function (forDay) {
        var weeks = [];
        var month = Calendar.months(1, forDay);
        var numOfWeeks = month.days.length / 7;
        var dayIndex = 0;
        for (var week = 0; week < numOfWeeks; week++) {
            var days = [];
            for (var day = 0; day < 7; day++) {
                days.push(month.days[dayIndex]);
                dayIndex++;
            }
            weeks.push(days);
        }
        return weeks;
    };
    DatePickerComponent.prototype.isValidDay = function (day) {
        if (!this.toDate && !this.fromDate) {
            return true;
        }
        if (this.toDate && this.fromDate) {
            return day.toDate() >= this.fromDate && day.toDate() <= this.toDate;
        }
        if (this.toDate) {
            return day.toDate() <= this.toDate;
        }
        if (this.fromDate) {
            return day.toDate() >= this.fromDate;
        }
    };
    DatePickerComponent.prototype.isOneOfTheValidDates = function (day) {
        if (this.validDates && this.validDates.length) {
            var index = this.validDates.findIndex(function (validDate) {
                return validDate.getFullYear() === day.toDate().getFullYear() &&
                    validDate.getMonth() === day.toDate().getMonth() &&
                    validDate.getDate() === day.toDate().getDate();
            });
            return index !== -1;
        }
        return true;
    };
    DatePickerComponent.prototype.isValidMonth = function (index) {
        if (this.toDate && this.toDate.getFullYear() !== this.yearSelected && this.fromDate && this.fromDate.getFullYear() !== this.yearSelected) {
            return true;
        }
        if (!this.toDate && !this.fromDate) {
            return true;
        }
        if (this.fromDate && !this.toDate) {
            return new Date(this.yearSelected, index, 1) >= this.fromDate;
        }
        if (this.toDate && !this.fromDate) {
            return new Date(this.yearSelected, index, 1) <= this.toDate;
        }
        return new Date(this.yearSelected, index, 1) >= this.fromDate &&
            new Date(this.yearSelected, index, 1) <= this.toDate;
    };
    //Styles
    DatePickerComponent.prototype.getDayStyle = function (day) {
        var style = {};
        if (this.isToday(day.dayOfMonth)) {
            style = this.todaysItemStyle;
        }
        if (this.daySelected && day.dayIdentifier === this.daySelected.dayIdentifier) {
            style = __assign({}, style, this.itemSelectedStyle);
        }
        var dayStyle = this.dateStyles && this.dateStyles[day.toDate().toISOString().slice(0, 10)];
        if (dayStyle) {
            style = __assign({}, style, dayStyle);
        }
        return style;
    };
    DatePickerComponent.prototype.getMonthStyle = function (index) {
        var style = {};
        style = __assign({}, style, this.monthLabelsStyle);
        if (index === this.currentMonth - 1) {
            style = __assign({}, style, this.todaysItemStyle);
        }
        if (index === this.monthSelected - 1) {
            style = __assign({}, style, this.itemSelectedStyle);
        }
        return style;
    };
    DatePickerComponent.prototype.getYearStyle = function (year) {
        var style = {};
        style = __assign({}, style, this.yearLabelsStyle);
        if (year === this.currentYear) {
            style = __assign({}, style, this.todaysItemStyle);
        }
        if (year === this.yearSelected) {
            style = __assign({}, style, this.itemSelectedStyle);
        }
        return style;
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "monthLabels", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "dayLabels", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatePickerComponent.prototype, "date", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatePickerComponent.prototype, "fromDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatePickerComponent.prototype, "toDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], DatePickerComponent.prototype, "validDates", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "dateStyles", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "backgroundStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "notInCalendarStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "dayLabelsStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "monthLabelsStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "yearLabelsStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "itemSelectedStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "invalidDateStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatePickerComponent.prototype, "todaysItemStyle", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DatePickerComponent.prototype, "onSelect", void 0);
DatePickerComponent.ɵfac = function DatePickerComponent_Factory(t) { return new (t || DatePickerComponent)(); };
DatePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatePickerComponent, selectors: [["ionic-calendar-date-picker"]], inputs: { monthLabels: "monthLabels", dayLabels: "dayLabels", validDates: "validDates", dateStyles: "dateStyles", backgroundStyle: "backgroundStyle", notInCalendarStyle: "notInCalendarStyle", dayLabelsStyle: "dayLabelsStyle", monthLabelsStyle: "monthLabelsStyle", yearLabelsStyle: "yearLabelsStyle", itemSelectedStyle: "itemSelectedStyle", invalidDateStyle: "invalidDateStyle", todaysItemStyle: "todaysItemStyle", date: "date", fromDate: "fromDate", toDate: "toDate" }, outputs: { onSelect: "onSelect" }, decls: 5, vars: 5, consts: [[3, "ngStyle"], [3, "ngStyle", 4, "ngIf"], [4, "ngIf"], ["name", "calendar", "slot", "start"], ["fill", "clear", 1, "calendar-button", 3, "click"], ["fill", "clear", 1, "calendar-button", 3, "disabled", "click"], ["slot", "end", 4, "ngIf"], ["slot", "end"], ["fill", "clear", 3, "disabled", "click"], ["slot", "icon-only", "name", "ios-arrow-back"], ["slot", "icon-only", "name", "ios-arrow-forward"], ["text-center", "", 3, "ngStyle", 4, "ngFor", "ngForOf"], [4, "ngFor", "ngForOf"], ["text-center", "", 3, "ngStyle"], ["text-center", "", 3, "ngStyle", "click", 4, "ngFor", "ngForOf"], ["text-center", "", 3, "ngStyle", "click"], ["justify-content-end", ""], ["text-end", ""], ["fill", "clear", 3, "click"], ["slot", "icon-only", "name", "close"], ["size", "3", "text-center", "", 3, "ngStyle", "click", 4, "ngFor", "ngForOf"], ["size", "3", "text-center", "", 3, "ngStyle", "click"], ["size", "10", "text-center", ""], ["size", "2", "text-center", ""], ["fill", "clear", 1, "year-range", 3, "disabled"]], template: function DatePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DatePickerComponent_ion_item_1_Template, 7, 5, "ion-item", 1);
        ɵngcc0.ɵɵtemplate(2, DatePickerComponent_ion_grid_2_Template, 4, 2, "ion-grid", 2);
        ɵngcc0.ɵɵtemplate(3, DatePickerComponent_ion_grid_3_Template, 7, 1, "ion-grid", 2);
        ɵngcc0.ɵɵtemplate(4, DatePickerComponent_ion_grid_4_Template, 9, 2, "ion-grid", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngStyle", ctx.backgroundStyle);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showView === "calendar");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showView === "calendar");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showView === "month");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showView === "year");
    } }, directives: [ɵngcc1.NgStyle, ɵngcc1.NgIf, ɵngcc2.IonItem, ɵngcc2.IonIcon, ɵngcc2.IonButton, ɵngcc2.IonGrid, ɵngcc2.IonRow, ɵngcc1.NgForOf, ɵngcc2.IonCol], styles: [".item[_ngcontent-%COMP%] {\n      .item-inner {\n        border-bottom: none !important;\n      }\n    }\n\n  ion-icon[_ngcontent-%COMP%] {\n    font-size: 25px;\n  }\n\n  .year-range[_ngcontent-%COMP%] {\n    font-size: 15px;\n    font-weight: 550;\n    &.button[disabled] {\n      opacity: 1;\n      color: gray !important;\n    }\n  }\n\n  .calendar-button[_ngcontent-%COMP%] {\n    text-decoration: underline;\n    padding-right: 2px !important;\n    padding-left: 2px !important;\n  }\n\n  .invalidMonth[_ngcontent-%COMP%] {\n    color: #8b8b8b\n  }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatePickerComponent, [{
        type: Component,
        args: [{
                selector: 'ionic-calendar-date-picker',
                template: HTML_CODE,
                styles: [CSS_STYLE]
            }]
    }], function () { return []; }, { monthLabels: [{
            type: Input
        }], dayLabels: [{
            type: Input
        }], validDates: [{
            type: Input
        }], dateStyles: [{
            type: Input
        }], backgroundStyle: [{
            type: Input
        }], notInCalendarStyle: [{
            type: Input
        }], dayLabelsStyle: [{
            type: Input
        }], monthLabelsStyle: [{
            type: Input
        }], yearLabelsStyle: [{
            type: Input
        }], itemSelectedStyle: [{
            type: Input
        }], invalidDateStyle: [{
            type: Input
        }], todaysItemStyle: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], date: [{
            type: Input
        }], fromDate: [{
            type: Input
        }], toDate: [{
            type: Input
        }] }); })();
    return DatePickerComponent;
}());
export { DatePickerComponent };

//# sourceMappingURL=date-picker-component.js.map