import { OnInit, EventEmitter } from '@angular/core';
import { Day } from 'dayspan';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerComponent implements OnInit {
    monthLabels: string[];
    dayLabels: string[];
    date: Date;
    fromDate: Date;
    toDate: Date;
    validDates: Date[];
    dateStyles: any;
    backgroundStyle: {
        'background-color': string;
    };
    notInCalendarStyle: {
        'color': string;
    };
    dayLabelsStyle: {
        'font-weight': number;
        'font-size': string;
    };
    monthLabelsStyle: {
        'font-size': string;
    };
    yearLabelsStyle: {
        'font-size': string;
    };
    itemSelectedStyle: {
        'background': string;
        'color': string;
    };
    invalidDateStyle: {
        'text-decoration': string;
        'color': string;
    };
    todaysItemStyle: {
        'color': string;
    };
    onSelect: EventEmitter<Date>;
    showView: string;
    weeks: Array<Array<Day>>;
    years: Array<number>;
    yearSelected: number;
    monthSelected: number;
    currentYear: number;
    currentMonth: number;
    currentDay: number;
    daySelected: Day;
    dayHighlighted: Day;
    startYear: number;
    endYear: number;
    ngOnInit(): void;
    initOptions(): void;
    createCalendarWeeks(): void;
    hasPrevious(): boolean;
    hasNext(): boolean;
    previous(): void;
    next(): void;
    confirmDay(day: Day): void;
    selectDay(day: Day): void;
    showMonthView(): void;
    hasYearSelection(): boolean;
    showYearView(): void;
    generateYears(): void;
    showPreviousYears(): void;
    showNextYears(): void;
    hasPreviousYears(): boolean;
    hasNextYears(): boolean;
    selectMonth(month: number): void;
    selectYear(year: any): void;
    resetView(): void;
    isToday(day: any): boolean;
    generateCalendarWeeks(forDay: Day): Array<any>;
    isValidDay(day: Day): boolean;
    isOneOfTheValidDates(day: Day): boolean;
    isValidMonth(index: number): boolean;
    getDayStyle(day: Day): {};
    getMonthStyle(index: any): {};
    getYearStyle(year: any): {};
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerComponent, "ionic-calendar-date-picker", never, { "monthLabels": "monthLabels"; "dayLabels": "dayLabels"; "validDates": "validDates"; "dateStyles": "dateStyles"; "backgroundStyle": "backgroundStyle"; "notInCalendarStyle": "notInCalendarStyle"; "dayLabelsStyle": "dayLabelsStyle"; "monthLabelsStyle": "monthLabelsStyle"; "yearLabelsStyle": "yearLabelsStyle"; "itemSelectedStyle": "itemSelectedStyle"; "invalidDateStyle": "invalidDateStyle"; "todaysItemStyle": "todaysItemStyle"; "date": "date"; "fromDate": "fromDate"; "toDate": "toDate"; }, { "onSelect": "onSelect"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcGlja2VyLWNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERheSB9IGZyb20gJ2RheXNwYW4nO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgbW9udGhMYWJlbHM6IHN0cmluZ1tdO1xuICAgIGRheUxhYmVsczogc3RyaW5nW107XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBmcm9tRGF0ZTogRGF0ZTtcbiAgICB0b0RhdGU6IERhdGU7XG4gICAgdmFsaWREYXRlczogRGF0ZVtdO1xuICAgIGRhdGVTdHlsZXM6IGFueTtcbiAgICBiYWNrZ3JvdW5kU3R5bGU6IHtcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBzdHJpbmc7XG4gICAgfTtcbiAgICBub3RJbkNhbGVuZGFyU3R5bGU6IHtcbiAgICAgICAgJ2NvbG9yJzogc3RyaW5nO1xuICAgIH07XG4gICAgZGF5TGFiZWxzU3R5bGU6IHtcbiAgICAgICAgJ2ZvbnQtd2VpZ2h0JzogbnVtYmVyO1xuICAgICAgICAnZm9udC1zaXplJzogc3RyaW5nO1xuICAgIH07XG4gICAgbW9udGhMYWJlbHNTdHlsZToge1xuICAgICAgICAnZm9udC1zaXplJzogc3RyaW5nO1xuICAgIH07XG4gICAgeWVhckxhYmVsc1N0eWxlOiB7XG4gICAgICAgICdmb250LXNpemUnOiBzdHJpbmc7XG4gICAgfTtcbiAgICBpdGVtU2VsZWN0ZWRTdHlsZToge1xuICAgICAgICAnYmFja2dyb3VuZCc6IHN0cmluZztcbiAgICAgICAgJ2NvbG9yJzogc3RyaW5nO1xuICAgIH07XG4gICAgaW52YWxpZERhdGVTdHlsZToge1xuICAgICAgICAndGV4dC1kZWNvcmF0aW9uJzogc3RyaW5nO1xuICAgICAgICAnY29sb3InOiBzdHJpbmc7XG4gICAgfTtcbiAgICB0b2RheXNJdGVtU3R5bGU6IHtcbiAgICAgICAgJ2NvbG9yJzogc3RyaW5nO1xuICAgIH07XG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBzaG93Vmlldzogc3RyaW5nO1xuICAgIHdlZWtzOiBBcnJheTxBcnJheTxEYXk+PjtcbiAgICB5ZWFyczogQXJyYXk8bnVtYmVyPjtcbiAgICB5ZWFyU2VsZWN0ZWQ6IG51bWJlcjtcbiAgICBtb250aFNlbGVjdGVkOiBudW1iZXI7XG4gICAgY3VycmVudFllYXI6IG51bWJlcjtcbiAgICBjdXJyZW50TW9udGg6IG51bWJlcjtcbiAgICBjdXJyZW50RGF5OiBudW1iZXI7XG4gICAgZGF5U2VsZWN0ZWQ6IERheTtcbiAgICBkYXlIaWdobGlnaHRlZDogRGF5O1xuICAgIHN0YXJ0WWVhcjogbnVtYmVyO1xuICAgIGVuZFllYXI6IG51bWJlcjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGluaXRPcHRpb25zKCk6IHZvaWQ7XG4gICAgY3JlYXRlQ2FsZW5kYXJXZWVrcygpOiB2b2lkO1xuICAgIGhhc1ByZXZpb3VzKCk6IGJvb2xlYW47XG4gICAgaGFzTmV4dCgpOiBib29sZWFuO1xuICAgIHByZXZpb3VzKCk6IHZvaWQ7XG4gICAgbmV4dCgpOiB2b2lkO1xuICAgIGNvbmZpcm1EYXkoZGF5OiBEYXkpOiB2b2lkO1xuICAgIHNlbGVjdERheShkYXk6IERheSk6IHZvaWQ7XG4gICAgc2hvd01vbnRoVmlldygpOiB2b2lkO1xuICAgIGhhc1llYXJTZWxlY3Rpb24oKTogYm9vbGVhbjtcbiAgICBzaG93WWVhclZpZXcoKTogdm9pZDtcbiAgICBnZW5lcmF0ZVllYXJzKCk6IHZvaWQ7XG4gICAgc2hvd1ByZXZpb3VzWWVhcnMoKTogdm9pZDtcbiAgICBzaG93TmV4dFllYXJzKCk6IHZvaWQ7XG4gICAgaGFzUHJldmlvdXNZZWFycygpOiBib29sZWFuO1xuICAgIGhhc05leHRZZWFycygpOiBib29sZWFuO1xuICAgIHNlbGVjdE1vbnRoKG1vbnRoOiBudW1iZXIpOiB2b2lkO1xuICAgIHNlbGVjdFllYXIoeWVhcjogYW55KTogdm9pZDtcbiAgICByZXNldFZpZXcoKTogdm9pZDtcbiAgICBpc1RvZGF5KGRheTogYW55KTogYm9vbGVhbjtcbiAgICBnZW5lcmF0ZUNhbGVuZGFyV2Vla3MoZm9yRGF5OiBEYXkpOiBBcnJheTxhbnk+O1xuICAgIGlzVmFsaWREYXkoZGF5OiBEYXkpOiBib29sZWFuO1xuICAgIGlzT25lT2ZUaGVWYWxpZERhdGVzKGRheTogRGF5KTogYm9vbGVhbjtcbiAgICBpc1ZhbGlkTW9udGgoaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgZ2V0RGF5U3R5bGUoZGF5OiBEYXkpOiB7fTtcbiAgICBnZXRNb250aFN0eWxlKGluZGV4OiBhbnkpOiB7fTtcbiAgICBnZXRZZWFyU3R5bGUoeWVhcjogYW55KToge307XG59XG4iXX0=